[General]
network = crownet.simulations.networks.World
image-path = ../../images
print-undisposed = true
num-rngs = 2
sim-time-limit = 400s
outputvectormanager-class = "omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class = "omnetpp::envir::SqliteOutputScalarManager"
experiment-label = ${datetime}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out
seed-set = 195
**.scalar-recording = true
**.routingRecorder.enabled = false
*.eNB[*].sctp.**.vector-recording = false
*.eNB[*].**.vector-recording = true
*.eNB[*].pos*.result-recording-modes = +vector
*.eNB[*].pos*.vector-recording = true
*.*Node[*].app[*].**.vector-recording = true
*.*Node[*].nTable.**.vector-recording = true
*.*Node[*].cellularNic.phy.**.vector-recording = true
*.*Node[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.*Node[*].cellularNic.channelModel[*].**.vector-recording = true
*.*Node[*].cellularNic.**.vector-recording = false
*.*Node[*].pos*.result-recording-modes = +vector
*.*Node[*].pos*.vector-recording = true
*.misc[*].app[*].**.vector-recording = true
*.misc[*].nTable.**.vector-recording = true
*.misc[*].cellularNic.phy.**.vector-recording = true
*.misc[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.misc[*].cellularNic.channelModel[*].**.vector-recording = true
*.misc[*].cellularNic.**.vector-recording = false
*.misc[*].pos*.result-recording-modes = +vector
*.misc[*].pos*.vector-recording = true
**.vector-recording = true
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.ueTxPower = 20
**.d2dTxPower = 20
**.eNodeBTxPower = 20
**.numRbDl = 20
**.numRbUl = 20
**.numBands = 20
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz
**.channelModel[0].shadowing = true
**.channelModel[0].scenario = "URBAN_MICROCELL"
**.channelModel[0].nodeb_height = 25
**.channelModel[0].ue_height = 1.5
**.channelModel[0].building_height = 20
**.channelModel[0].street_wide = 20
**.channelModel[0].antennaGainUe = 0
**.channelModel[0].antennGainEnB = 0
**.channelModel[0].correlation_distance = 25
**.channelModel[0].dynamic_los = true
**.channelModel[0].fixed_los = false
**.channelModel[0].fading = false
**.channelModel[0].fading_type = "JAKES"
**.channelModel[0].fading_paths = 6
**.channelModel[0].delay_rms = 363e-9
**.channelModel[0].extCell_interference = true
**.channelModel[0].downlink_interference = true
**.channelModel[0].uplink_interference = true
**.channelModel[0].d2d_interference = true
**.rlc.um.queueSize = 300000B
**.mac.queueSize = 10000B
**.pdcpRrc.backgroundRlc = 1
*.numEnb = 1
*.eNB[0].mobility.initFromDisplayString = false
*.eNB[0].mobility.initialX = 20m
*.eNB[0].mobility.initialY = 20m
*.eNB[*].nicType = "LteNicEnbD2D"
*.eNB[*].cellularNic.mac.amcMode = "D2D"
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nicType = "LteNicUeD2D"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.mac.amcMode = "D2D"
*.*Node[*].cellularNic.address = "auto"
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nicType = "LteNicUeD2D"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].cellularNic.mac.amcMode = "D2D"
*.misc[*].cellularNic.address = "auto"
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m
**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")

[Config withVadere]
*.traci.core.typename = "VadereCore"
*.traci.core.version = -1
*.traci.core.selfStopping = false
*.traci.launcher.typename = "VadereLauncher"
*.traci.launcher.hostname = "vadere"
*.traci.launcher.port = 9998
*.traci.mapper.typename = "VadereModuleMapper"
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
*.traci.nodes.typename = "VadereNodeManager"
*.traci.nodes.personSinkModule = ".mobility"
*.traci.nodes.vehicleSinkModule = ".mobility"
*.traci.nodes.personNode = "pNode"
*.traci.subscriptions.typename = "VadereSubscriptionManager"
*.*Node[*].mobility.visualRepresentation = "^"
*.coordConverter.typename = "OsgCoordConverterVadere"
*.coordConverter.coreModule = "traci.core"
**.useVadere = true
*.gloablDensityMap.useSignalMapInit = true

[Config D2D_General]
*.*Node[*].ipv4.configurator.interfaces = "cellular"
*.*Node[*].ipv4.configurator.addressBase = "20.0.0.0"
*.*Node[*].ipv4.configurator.netmask = "255.0.0.0"
*.*Node[*].cellularNic.processingDelayIn = 5518us
*.*Node[*].cellularNic.processingDelayOut = 1134us
**.rlc.um.mapAllLcidsToSingleBearer = true
*.eNB[*].cellularNic.processingDelayIn = 1134us
*.eNB[*].cellularNic.processingDelayOut = 1134us
*.misc[*].ipv4.configurator.interfaces = "cellular"
*.misc[*].cellularNic.processingDelayIn = 5518us
*.misc[*].cellularNic.processingDelayOut = 1134us
**.usePreconfiguredTxParams = true
**.d2dCqi = 7

[Config World_lte_dcd]
network = crownet.simulations.networks.World
*.hasCellular = true
*.hasStoryboard = false
*.hasWlan = false
*.gloablDensityMap.typename = "GlobalDensityMap"
*.flowController.typename = ""
**.packetMeter.alpha = 0.0625

[Config env_mf_003_template]
extends = D2D_General, withVadere
**.vadereScenarioPath = "vadere/scenarios/mf_circle.scenario"

[Config enbSettings_5Cells_SubwayStationArea]
*.numEnb = 5
*.eNB[*].mobility.initFromDisplayString = false
*.eNB[*].nicType = "LteNicEnbD2D"
*.eNB[*].cellularNic.mac.amcMode = "D2D"
*.eNB[*].mobility.coordinateSystemModule = "coordConverter"
**.rlc.um.mapAllLcidsToSingleBearer = true
*.pNode[*].cellularNic.phy.dynamicCellAssociation = true
*.vNode[*].cellularNic.phy.dynamicCellAssociation = true
*.misc[*].cellularNic.phy.dynamicCellAssociation = true
**.cellularNic.phy.enableHandover = true
*.eNB[*].numX2Apps = 4
*.eNB[*].x2App[*].server.localPort = 5000 + ancestorIndex(1)
*.eNB[0].mobility.initialLatitude = 48.1611075739651deg
*.eNB[0].mobility.initialLongitude = 11.58496314178364deg
*.eNB[0].x2App[0].client.connectAddress = "eNB[1]%x2ppp0"
*.eNB[0].x2App[1].client.connectAddress = "eNB[2]%x2ppp0"
*.eNB[0].x2App[2].client.connectAddress = "eNB[3]%x2ppp0"
*.eNB[0].x2App[3].client.connectAddress = "eNB[4]%x2ppp0"
*.eNB[1].mobility.initialLatitude = 48.16102065541025deg
*.eNB[1].mobility.initialLongitude = 11.58817930793272deg
*.eNB[1].x2App[0].client.connectAddress = "eNB[0]%x2ppp0"
*.eNB[1].x2App[1].client.connectAddress = "eNB[2]%x2ppp0"
*.eNB[1].x2App[2].client.connectAddress = "eNB[3]%x2ppp0"
*.eNB[1].x2App[3].client.connectAddress = "eNB[4]%x2ppp0"
*.eNB[2].mobility.initialLatitude = 48.1633792566954deg
*.eNB[2].mobility.initialLongitude = 11.588552454281507deg
*.eNB[2].x2App[0].client.connectAddress = "eNB[0]%x2ppp0"
*.eNB[2].x2App[1].client.connectAddress = "eNB[1]%x2ppp0"
*.eNB[2].x2App[2].client.connectAddress = "eNB[3]%x2ppp0"
*.eNB[2].x2App[3].client.connectAddress = "eNB[4]%x2ppp0"
*.eNB[3].mobility.initialLatitude = 48.163880988708485deg
*.eNB[3].mobility.initialLongitude = 11.584803221919875deg
*.eNB[3].x2App[0].client.connectAddress = "eNB[0]%x2ppp0"
*.eNB[3].x2App[1].client.connectAddress = "eNB[1]%x2ppp0"
*.eNB[3].x2App[2].client.connectAddress = "eNB[2]%x2ppp0"
*.eNB[3].x2App[3].client.connectAddress = "eNB[4]%x2ppp0"
*.eNB[4].mobility.initialLatitude = 48.162190092718085deg
*.eNB[4].mobility.initialLongitude = 11.586633415916312deg
*.eNB[4].x2App[0].client.connectAddress = "eNB[0]%x2ppp0"
*.eNB[4].x2App[1].client.connectAddress = "eNB[1]%x2ppp0"
*.eNB[4].x2App[2].client.connectAddress = "eNB[2]%x2ppp0"
*.eNB[4].x2App[3].client.connectAddress = "eNB[3]%x2ppp0"

[Config ped_density_app]
extends = World_lte_dcd
**.cellSize = 5.0m
*.gloablDensityMap.writeMapInterval = 1000ms
*.pNode[*].numApps = 2
*.pNode[*].app[0].socket.typename = "UdpSocketManager"
*.pNode[*].app[0].typename = "BeaconApp"
*.pNode[*].app[0].app.typename = "BeaconDynamic"
*.pNode[*].app[0].app.startTime = uniform(0s,50ms)
*.pNode[*].app[0].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[0].scheduler.generationInterval = 100ms + uniform(0s, 50ms)
*.pNode[*].app[1].typename = "DensityMapApp"
*.pNode[*].app[1].app.typename = "DensityMapAppSimple"
*.pNode[*].app[1].app.startTime = 0s
#*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
#	writeDensityLog: true, \
#	alpha: 0.50, \
#	mapTypeLog: "all", \
#	cellAgeTTL: -1.0s, \
#	idStreamType: "insertionOrder"}
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmf{ \
	writeDensityLog: true, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[1].scheduler.generationInterval = 1000ms + uniform(0s, 50ms)
*.pNode[*].app[1].scheduler.startOffset = 5s + uniform(0s, 50ms)
*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 5s

[Config subwayDynamic_multiEnb_compact_density]
extends = ped_density_app, enbSettings_5Cells_SubwayStationArea, env_mf_003_template
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
sim-time-limit = 250s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.misc[*].nTable.maxAge = 5s
**.ueTxPower = 20
**.d2dTxPower = 20
**.eNodeBTxPower = 20
**.numRbDl = 25
**.numRbUl = 25
**.numBands = 25

[Config ymfPlusDist_4s_1_new]
extends = subwayDynamic_multiEnb_compact_density 
sim-time-limit = 250s
**.vadereScenarioPath = "vadere/scenarios/mf_circle.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.50, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymfPlusDist_4s_2_new]
extends = subwayDynamic_multiEnb_compact_density 
sim-time-limit = 250s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.50, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymf_4s_2ttl_new]
extends = subwayDynamic_multiEnb_compact_density 
sim-time-limit = 250s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmf{ \
	writeDensityLog: true, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymfPlusDist_4s_3_new]
extends = subwayDynamic_multiEnb_compact_density 
sim-time-limit = 250s
**.vadereScenarioPath = "vadere/scenarios/mf_circle.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.50, \
	mapTypeLog: "all", \
	cellAgeTTL: 20.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)


### 

[Config time]
sim-time-limit = 400s


[Config ymfD_4s_long_ttl]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.50, \
	mapTypeLog: "all", \
	cellAgeTTL: 20.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymfD_4s_long]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.50, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymf_4s_long_ttl]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmf{ \
	writeDensityLog: true, \
	mapTypeLog: "all", \
	cellAgeTTL: 20.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymf_4s_long]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmf{ \
	writeDensityLog: true, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)




# #######


[Config ymfD_4s_3source_long_ttl]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.50, \
	mapTypeLog: "all", \
	cellAgeTTL: 20.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymfD_4s_3source_long]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.50, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymf_4s_3source_long_ttl]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmf{ \
	writeDensityLog: true, \
	mapTypeLog: "all", \
	cellAgeTTL: 20.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymf_4s_3source_long]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmf{ \
	writeDensityLog: true, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)



# ##### change alpha


[Config ymfD_4s_3source_long_ttl_75]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.75, \
	mapTypeLog: "all", \
	cellAgeTTL: 20.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymfD_4s_3source_long_ttl_90]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.90, \
	mapTypeLog: "all", \
	cellAgeTTL: 20.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)


[Config ymfD_4s_3source_long_75]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.75, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config ymfD_4s_3source_long_90]
extends = subwayDynamic_multiEnb_compact_density
# based on ymfPlusDist_4s_1_new
sim-time-limit = 800s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
	writeDensityLog: true, \
	alpha: 0.90, \
	mapTypeLog: "all", \
	cellAgeTTL: -1.0s, \
	idStreamType: "insertionOrder"}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)

[Config final]
extends = subwayDynamic_multiEnb_compact_density

[Config final_test]
extends = subwayDynamic_multiEnb_compact_density
sim-time-limit = 600.0s
**.vadereScenarioPath = "vadere/scenarios/mf_circle2.scenario"
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{writeDensityLog: true, mapTypeLog: "all", cellAgeTTL: -1.0s, alpha: 0.5, idStreamType: "insertionOrder", stepDist: 2.0, zeroStep: true}
*.pNode[*].app[1].scheduler.generationInterval = 4000ms + uniform(0s, 50ms)
*.pNode[*].app[1].scheduler.numberPackets  = -1
*.pNode[*].app[1].scheduler.amoutOfData  = 200MB
*.pNode[*].app[1].app.maxPduLength = 1400B


