[General]
network = crownet.simulations.networks.World
image-path=../../images
print-undisposed = true
num-rngs = 2  # seperate random base for entropy map

#============= Simulation parameters ================
sim-time-limit=400s
#warmup-period=60s      # Note: When analyzing the results, you need to apply the same warmup-period to measurement data!
#repeat = 3

#============= Statistics ===========================
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
experiment-label = ${datetime} # use ${experiment}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out
seed-set = ${repetition}

**.scalar-recording = true
#**.statistic-recording = false
**.routingRecorder.enabled = false


*.eNB[*].sctp.**.vector-recording = false
*.eNB[*].**.vector-recording = true
*.eNB[*].pos*.result-recording-modes = +vector
*.eNB[*].pos*.vector-recording=true

*.*Node[*].app[*].**.vector-recording = true
*.*Node[*].nTable.**.vector-recording = true
*.*Node[*].cellularNic.phy.**.vector-recording = true
*.*Node[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.*Node[*].cellularNic.channelModel[*].**.vector-recording = true
*.*Node[*].cellularNic.**.vector-recording = false
*.*Node[*].pos*.result-recording-modes = +vector
*.*Node[*].pos*.vector-recording=true

*.misc[*].app[*].**.vector-recording = true
*.misc[*].nTable.**.vector-recording = true
*.misc[*].cellularNic.phy.**.vector-recording = true
*.misc[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.misc[*].cellularNic.channelModel[*].**.vector-recording = true
*.misc[*].cellularNic.**.vector-recording = false
*.misc[*].pos*.result-recording-modes = +vector
*.misc[*].pos*.vector-recording=true

**.vector-recording = true


#============= Mobility parameters ==================
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

#============= AMC module parameters ===============
**.ueTxPower = 20 #20
**.d2dTxPower = 20 #26 #15
**.eNodeBTxPower = 20  #DBm
**.numRbDl = 20
**.numRbUl = 20
**.numBands = 20

#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz


#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel.shadowing = true
**.channelModel.scenario = "URBAN_MICROCELL" #"URBAN_MACROCELL"
**.channelModel.nodeb_height = 25
**.channelModel.ue_height = 1.5
**.channelModel.building_height = 20

**.channelModel.street_wide = 20
**.channelModel.carrierFrequency = 2.6  # carrier frequency (in GHz)
**.channelModel.antennaGainUe = 0
**.channelModel.antennGainEnB = 0

**.channelModel.correlation_distance = 25
**.channelModel.dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel.fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel.fading = false        # Enable/disable fading
**.channelModel.fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel.fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel.delay_rms = 363e-9

**.channelModel.extCell_interference = true # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel.downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel.uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel.d2d_interference = true      # if true, enables the interference computation for D2D connections

#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 300000B #300000B     # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)


#=============  defaults  ===========
# eNodeB
*.numEnb = 1
*.eNB[0].mobility.initFromDisplayString = false
*.eNB[0].mobility.initialX = 20m
*.eNB[0].mobility.initialY = 20m
*.eNB[*].nicType = "LteNicEnbD2D"
*.eNB[*].cellularNic.mac.amcMode = "D2D"

# (person and vehicle)
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nicType = "LteNicUeD2D"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.*Node[*].cellularNic.address = "auto"

# Misc
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nicType = "LteNicUeD2D"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.misc[*].cellularNic.address = "auto"


# PhysicalEnviroment (*.physicalEnvironment.config set by other config)
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m


**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")

# END General

[Config reducedPowerSettings]

#============= AMC module parameters ===============
**.ueTxPower = 20 #20
**.d2dTxPower = 10
**.eNodeBTxPower = 20  #DBm
**.numRbDl = 20
**.numRbUl = 20
**.numBands = 20


include ../networks/default_configs.ini
include muc_stationary.ini
include muc_subway_100_uniform.ini

[Config env_mf_2peds]
extends=D2D_General, withVadere
**.vadereScenarioPath = "vadere/scenarios/mf_2peds.scenario"
#*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_small_env.xml")

[Config env_mf_001_small_60]
extends=D2D_General, withVadere
**.vadereScenarioPath = "vadere/scenarios/mf_001_small_60.scenario"
#*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_small_env.xml")

[Config env_mf_001_small_120]
extends=D2D_General, withVadere
**.vadereScenarioPath = "vadere/scenarios/mf_001_small_60.scenario"
#*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_small_env.xml")

[Config env_mf_001_base_96]
extends=D2D_General, withVadere
**.vadereScenarioPath = "vadere/scenarios/mf_001_base_96.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_base_env.xml")

[Config env_mf_001_base_44]
extends=D2D_General, withVadere
**.vadereScenarioPath = "vadere/scenarios/mf_001_base_44.scenario"
#*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_base_env.xml")

[Config env_mf_001_base_72]
extends=D2D_General, withVadere
**.vadereScenarioPath = "vadere/scenarios/mf_001_base_72.scenario"
#*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_base_env.xml")

[Config env_mf_003_template]
extends=D2D_General, withVadere
**.vadereScenarioPath = "vadere/scenarios/mf_003_template.scenario"



[Config vadere00_120]
extends = env_mf_001_small_120, pNode_dcdMapSimple
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"

[Config vadere_base_44]
extends = env_mf_001_base_44, pNode_dcdMapSimple
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"

[Config vadere_base_96]
extends = env_mf_001_base_96, pNode_dcdMapSimple
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"

[Config vadere_base_72]
extends = env_mf_001_base_72, pNode_dcdMapSimple
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"

[Config vadere_base_44_entropy]
extends = env_mf_001_base_44
sim-time-limit=150s
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
*.gloablDensityMap.typename = "crownet.common.GlobalEntropyMap"
*.gloablDensityMap.writeMapInterval = 2s
*.gloablDensityMap.entropyInterval = 50s
*.gloablDensityMap.entropyProvider = crownet::UniformEntropy{ minValue: 1.0, maxValue: 30.0, cellSelectionPropability: 0.70 }
*.pNode[*].nTable.typename = "EntropyNeigborhoodTableClient"
*.pNode[*].nTable.globalTable = "gloablDensityMap"
*.pNode[*].nTable.distance = 80.0

*.pNode[*].numApps = 1
*.pNode[*].app[0].socket.typename = "UdpSocketManager"
# DcDMap Application
*.pNode[*].app[0].typename = "DensityMapApp"
*.pNode[*].app[0].app.typename = "DensityMapAppSimple"
*.pNode[*].app[0].app.startTime = uniform(0s,0.02s)
*.pNode[*].app[0].app.mapCfg = crownet::MapCfg{writeDensityLog: true, mapType: "mean", mapTypeLog: "mean", idStreamType: "insertionOrder"}		
*.pNode[*].app[0].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[0].scheduler.generationInterval = 1s
*.pNode[*].app[0].scheduler.numberPackets = -1
*.pNode[*].app[0].scheduler.amoutOfData = 2kB


[Config vadere_multiCellsSubwayStation]
extends = vadere_base_96, World_lte_dcd, pNode_dynamicDcdApp, enbSettings_5Cells_SubwayStationArea, reducedPowerSettings
sim-time-limit= 200s
**.channelModel.tolerateMaxDistViolation = true

*.coordConverter.typename = "OsgCoordConverterVadere"

**.cellSize = 5.0m
*.gloablDensityMap.writeMapInterval = 1000ms



[Config muc_sumo]
extends=D2D_General, withSumoPeds
**.channelModel.tolerateMaxDistViolation = true
*.visualization.sceneVisualizer.typename = "OpenStreetMapSceneCanvasVisualizer"
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/munich/osm/munich_clean.osm")
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1

*.coordConverter.typename = "OsgCoordConverterSumo"
*.coordConverter.netFile = xmldoc("sumo/munich/munich.net.xml")


[Config mucSumo_1]
extends = muc_sumo, enbSettings_6Cells_Siegestor, World_lte, pApp_AlterSenderReceiver
# multiple eNB with with handover 2 Pedestrians and simple AlterSenderReceiver
*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/2peds_handover_together.sumo.cfg")


[Config mucSumo_2]
extends = muc_sumo, enbSettings_6Cells_Siegestor, World_lte_dcd
# multiple eNB with with handover 2 Pedestrians and simple AlterSenderReceiver
#*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/2peds_handover_together.sumo.cfg")
# 60 pedestrians with random trips
*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/munich_ped60.sumo.cfg")

[Config mucSumo_base]
extends = muc_sumo, enbSettings_5Cells_SubwayStationArea, World_lte_dcd
sim-time-limit= 30s 

# multiple eNB with with handover 2 Pedestrians and simple AlterSenderReceiver
*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/munich_ped300_small.sumo.cfg")

**.cellSize = 5.0m
*.gloablDensityMap.writeMapInterval = 1000ms


*.pNode[*].typename = "crownet.nodes.ApplicationLayerPedestrian"
*.pNode[*].numApps = 4
# alert application for additonal D2D-traffic
*.pNode[*].app[0].typename = "AlertSender"
*.pNode[*].app[0].localPort = 1000 #3088+ancestorIndex(0)
*.pNode[*].app[0].startTime = 100.0s + uniform(0s, 50ms) #uniform(0s,0.02s)
*.pNode[*].app[0].stopTime = 0s # 0:= never
*.pNode[*].app[0].destAddress = "224.0.0.1" # ALL_HOST_MCAST (automatically joined)
*.pNode[*].app[0].destPort = 1001
*.pNode[*].app[0].period = 100ms
*.pNode[*].app[1].typename = "AlertReceiver"
*.pNode[*].app[1].localPort = 1001
# density map setup
*.pNode[*].app[2].typename = "DensityMapApp"
*.pNode[*].app[2].app.typename = "DensityMapAppSimple"
*.pNode[*].app[2].socket.destPort = 30001
*.pNode[*].app[2].socket.localPort = 30001
*.pNode[*].app[2].app.startTime =uniform(0s,50ms)
*.pNode[*].app[2].app.mapCfg = crownet::MapCfg{ \
            writeDensityLog: true, \
            mapType: "ymf", \
            mapTypeLog: "all", \
			cellAgeTTL: -1.0s, \
            idStreamType: "insertionOrder"}

*.pNode[*].app[2].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[2].scheduler.generationInterval = 1s  + uniform(0s, 50ms)
*.misc[*].app[1].scheduler.startOffset = 3s + uniform(0s, 50ms)


# BeaconApp
*.pNode[*].app[3].typename = "BeaconApp"
*.pNode[*].app[3].app.typename = "BeaconDynamic" #"BeaconDynamic"
*.pNode[*].app[3].app.startTime = uniform(0s, 50ms)
*.pNode[*].app[3].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[3].scheduler.generationInterval = 100ms + uniform(0s, 50ms)
*.pNode[*].app[3].socket.destPort = 30002
*.pNode[*].app[3].socket.localPort = 30002

# neighborhoodTable for density map
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 3s

*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}

[Config misc_density_app]
extends = World_lte_dcd
**.cellSize = 5.0m
*.gloablDensityMap.writeMapInterval = 1000ms

*.misc[*].numApps = 2
*.misc[*].app[0].socket.typename = "UdpSocketManager"
# Beacon Application
*.misc[*].app[0].typename = "BeaconApp"
*.misc[*].app[0].app.typename = "BeaconDynamic"
*.misc[*].app[0].app.startTime =  uniform(0s,50ms)
*.misc[*].app[0].scheduler.typename = "IntervalScheduler"
*.misc[*].app[0].scheduler.generationInterval = 100ms + uniform(0s, 50ms)
# DcDMap Application
*.misc[*].app[1].typename = "DensityMapApp"
*.misc[*].app[1].app.typename = "DensityMapAppSimple"
*.misc[*].app[1].app.startTime = 0s
#*.misc[*].app[1].app.mapCfg = crownet::MapCfg{ \
#            writeDensityLog: true, \
#            mapType: "ymf", \
#            mapTypeLog: "all", \
#			 cellAgeTTL: -1.0s, \
#            idStreamType: "insertionOrder"}
*.misc[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
            writeDensityLog: true, \
            alpha: 0.50, \
            mapTypeLog: "ymfPlusDist", \
			cellAgeTTL: -1.0s, \
            idStreamType: "insertionOrder"}

*.misc[*].app[1].scheduler.typename = "IntervalScheduler"
*.misc[*].app[1].scheduler.generationInterval = 1000ms + uniform(0s, 50ms)
*.misc[*].app[1].scheduler.startOffset = 5s + uniform(0s, 50ms)

*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}

# NeighborhoodTable
*.misc[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.misc[*].nTable.maxAge = 5s

[Config ped_density_app]
extends = World_lte_dcd
**.cellSize = 5.0m
*.gloablDensityMap.writeMapInterval = 1000ms

*.pNode[*].numApps = 2
*.pNode[*].app[0].socket.typename = "UdpSocketManager"
# Beacon Application
*.pNode[*].app[0].typename = "BeaconApp"
*.pNode[*].app[0].app.typename = "BeaconDynamic"
*.pNode[*].app[0].app.startTime =  uniform(0s,50ms)
*.pNode[*].app[0].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[0].scheduler.generationInterval = 100ms + uniform(0s, 50ms)
# DcDMap Application
*.pNode[*].app[1].typename = "DensityMapApp"
*.pNode[*].app[1].app.typename = "DensityMapAppSimple"
*.pNode[*].app[1].app.startTime = 0s
#*.pNode[*].app[1].app.mapCfg = crownet::MapCfg{ \
#            writeDensityLog: true, \
#            mapType: "ymf", \
#            mapTypeLog: "all", \
#			 cellAgeTTL: -1.0s, \
#            idStreamType: "insertionOrder"}
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
            writeDensityLog: true, \
            alpha: 0.50, \
            mapTypeLog: "ymfPlusDist", \
			cellAgeTTL: -1.0s, \
            idStreamType: "insertionOrder"}

*.pNode[*].app[1].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[1].scheduler.generationInterval = 1000ms + uniform(0s, 50ms)
*.pNode[*].app[1].scheduler.startOffset = 5s + uniform(0s, 50ms)

*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}

# NeighborhoodTable
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 5s

[Config entropy_density_app]
extends = World_lte_dcd
**.cellSize = 5.0m
*.gloablDensityMap.typename = "crownet.common.GlobalEntropyMap"
*.gloablDensityMap.writeMapInterval = 1s
*.gloablDensityMap.entropyInterval = 10s
*.gloablDensityMap.entropyProvider = crownet::UniformEntropy{ minValue: 1.0, maxValue: 30.0, cellSelectionPropability: 0.70 }

*.misc[*].numApps = 1
*.misc[*].app[*].socket.typename = "UdpSocketManager"
# DcDMap Application
*.misc[*].app[0].typename = "DensityMapApp"
*.misc[*].app[0].app.typename = "EntropyMapAppSimple"
*.misc[*].app[0].app.startTime = 0s
#*.misc[*].app[1].app.mapCfg = crownet::MapCfg{ \
#            writeDensityLog: true, \
#            mapType: "ymf", \
#            mapTypeLog: "all", \
#			cellAgeTTL: -1.0s, \
#            idStreamType: "insertionOrder"}
*.misc[*].app[0].app.mapCfg = crownet::MapCfgYmfPlusDist{ \
            writeDensityLog: true, \
            alpha: 0.50, \
            mapTypeLog: "ymfPlusDist", \
			cellAgeTTL: -1.0s, \
            idStreamType: "insertionOrder"}

*.misc[*].app[0].scheduler.typename = "IntervalScheduler"
*.misc[*].app[0].scheduler.generationInterval = 1000ms + uniform(0s, 50ms)
*.misc[*].app[0].scheduler.startOffset = 1s + uniform(0s, 50ms)
*.misc[*].app[0].scheduler.numberPackets = -1
*.misc[*].app[0].scheduler.amoutOfData = 10kB

# NeighborhoodTable
*.misc[*].nTable.typename = "EntropyNeigborhoodTableClient"
*.misc[*].nTable.maxAge = 5s
*.misc[*].nTable.globalTable = "gloablDensityMap"
*.misc[*].nTable.distance = 50.0


[Config subwayStationary_base]
extends = D2D_General, noTraCI, World_lte_dcd
sim-time-limit=5s #10s

*.misc[*].middleware.typename = ""
*.misc[*].mobility.typename = "StationaryMobility"
*.misc[*].mobility.coordinateSystemModule = "coordConverter"
*.misc[*].mobility.initFromDisplayString = false
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"

*.coordConverter.typename = "OsgCoordConverterSumo"
*.coordConverter.netFile = xmldoc("sumo/munich/munich.net.xml")

**.channelModel.tolerateMaxDistViolation = true
*.visualization.sceneVisualizer.typename = "OpenStreetMapSceneCanvasVisualizer"
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/munich/osm/munich_clean.osm")
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1



[Config subwayStationary_centerEnb]
extends = ped_001, misc_density_app, subwayStationary_base, enbSettings_1Cell_SubwayStationArea_center

[Config subwayStationary_lowerEnb]
extends = ped_001, misc_density_app, subwayStationary_base, enbSettings_1Cell_SubwayStationArea_low

[Config subwayStationary_multiEnb]
extends = uniform_100_nodes, misc_density_app, subwayStationary_base, enbSettings_5Cells_SubwayStationArea
sim-time-limit=5000ms 
#sim-time-limit=35s 
*.misc[*].nTable.maxAge = 3s


[Config subwayStationary_multiEnb_entropy]
extends = uniform_100_nodes, entropy_density_app, subwayStationary_base, enbSettings_5Cells_SubwayStationArea
#sim-time-limit=5000ms 
sim-time-limit=35s 

[Config subwayDynamic_multiEnb_compact_density]
extends = ped_density_app, enbSettings_5Cells_SubwayStationArea, env_mf_003_template
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
#sim-time-limit=200s
sim-time-limit=10s
*.misc[*].nTable.maxAge = 5s
**.ueTxPower = 20 #20
**.d2dTxPower = 20 #26 #15
**.eNodeBTxPower = 20  #DBm
**.numRbDl = 25
**.numRbUl = 25
**.numBands = 25
