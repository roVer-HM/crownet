[General]
network = crownet.simulations.networks.World
image-path=../../images
print-undisposed = true

#============= Simulation parameters ================
sim-time-limit=400s
#warmup-period=60s      # Note: When analyzing the results, you need to apply the same warmup-period to measurement data!
#repeat = 3

#============= Statistics ===========================
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
experiment-label = ${datetime} # use ${experiment}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out
seed-set = ${repetition}

**.scalar-recording = true
#**.statistic-recording = false
**.routingRecorder.enabled = false

#*.pNode[0].lteNic.mac.*.vector-recording = false
*.eNB[*].sctp.**.vector-recording = false
*.eNB[*].**.vector-recording = true
*.*Node[*].lteNic.**.vector-recording = true
*.*Node[*].app[*].**.vector-recording = true
**.vector-recording = false


#============= Mobility parameters ==================
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

#============= AMC module parameters ===============
**.ueTxPower = 20
**.eNodeBTxPower = 20  #DBm
**.numRbDl = 20
**.numRbUl = 20
**.numBands = 20

#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz


#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel.shadowing = true
**.channelModel.scenario = "URBAN_MICROCELL" #"URBAN_MACROCELL"
**.channelModel.nodeb_height = 25
**.channelModel.ue_height = 1.5
**.channelModel.building_height = 20

**.channelModel.street_wide = 20
**.channelModel.carrierFrequency = 2.6  # carrier frequency (in GHz)
**.channelModel.antennaGainUe = 0
**.channelModel.antennGainEnB = 0

**.channelModel.correlation_distance = 25
**.channelModel.dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel.fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel.fading = false        # Enable/disable fading
**.channelModel.fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel.fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel.delay_rms = 363e-9

**.channelModel.extCell_interference = true # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel.downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel.uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel.d2d_interference = true      # if true, enables the interference computation for D2D connections

#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 5000000B #300000B     # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)


#=============  defaults  ===========
# eNodeB
*.numEnb = 1
*.eNB[0].mobility.initFromDisplayString = false
*.eNB[0].mobility.initialX = 20m
*.eNB[0].mobility.initialY = 20m
*.eNB[*].nicType = "LteNicEnbD2D"
*.eNB[*].lteNic.mac.amcMode = "D2D"

# UE
*.pNode[*].macCellId = 1
*.pNode[*].masterId = 1
*.pNode[*].nicType = "LteNicUeD2D"
*.pNode[*].radioDriver.dispatchInterfaceName = "cellular"
*.pNode[*].lteNic.mac.amcMode = "D2D" #"D2D"
*.pNode[*].lteNic.address = "auto"


# PhysicalEnviroment (*.physicalEnvironment.config set by other config)
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m


**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")

# END General

include ../networks/default_configs.ini 


[Config AidDcd_withArtery]
extends = World_lte_dcd
*.traci.mapper.personType = "crownet.nodes.DcdPedestrian"
*.pNode[*].useArtery = true
*.pNode[*].useAid = true
# Artery Settings
*.pNode[*].middleware.updateInterval = 0.1s # application trigger
*.pNode[*].middleware.datetime = "2020-06-01 12:35:00"
*.pNode[*].middleware.services = xmldoc("services.xml")
*.pNode[*].middleware.DenService.useCases = xml("<usecases/>")
*.pNode[*].vanetza.position.typename = "PedestrianPositionProvider"
# DcDMap Application
*.pNode[*].densityMap.app.typename = "crownet.applications.dmap.ArteryDensityMapApp"
# Beacon Application
*.pNode[*].beacon.typename = "" # remove. Provided by artery.
# NeighborhoodTable
*.pNode[*].nTable.typename = "" # remove. Provided by artery.


[Config AidDcd]
extends = World_lte_dcd
*.traci.mapper.personType = "crownet.nodes.DcdPedestrian"
*.pNode[*].useArtery = false
*.pNode[*].useAid = true
# DcDMap Application
*.pNode[*].densityMap.app.typename = "crownet.applications.dmap.DensityMapAppSimple"
*.pNode[*].densityMap.app.appMainInterval = 2s
*.pNode[*].densityMap.app.startTime = uniform(0s,0.02s)
*.pNode[*].densityMap.app.mapTypeLog = "ymf"
# Beacon Application
*.pNode[*].beacon.app.typename = "crownet.applications.beacon.BeaconSimple"
*.pNode[*].beacon.app.startTime = uniform(0s,0.02s)
# NeighborhoodTable
*.pNode[*].nTable.typename = "crownet.common.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 7s



[Config env_mf_2peds]
extends=D2D_General, withVadere
*.traci.launcher.vadereScenarioPath = "vadere/scenarios/mf_2peds.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_small_env.xml")

[Config env_mf_001_small_60]
extends=D2D_General, withVadere
*.traci.launcher.vadereScenarioPath = "vadere/scenarios/mf_001_small_60.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_small_env.xml")

[Config env_mf_001_small_120]
extends=D2D_General, withVadere
*.traci.launcher.vadereScenarioPath = "vadere/scenarios/mf_001_small_60.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_small_env.xml")

[Config env_mf_001_base_96]
extends=D2D_General, withVadere
*.traci.launcher.vadereScenarioPath = "vadere/scenarios/mf_001_base_96.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_base_env.xml")

[Config env_mf_001_base_72]
extends=D2D_General, withVadere
*.traci.launcher.vadereScenarioPath = "vadere/scenarios/mf_001_base_72.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_base_env.xml")


[Config vadere00_geo]
extends = env_mf_001_small_60, AidDcd_withArtery
result-dir = "/mnt/data"

[Config vadere00_120]
extends = env_mf_001_small_120, AidDcd
result-dir = "/mnt/data"

[Config vadere_base_96]
extends = env_mf_001_base_96, AidDcd
result-dir = "/mnt/data"

[Config vadere_base_72]
extends = env_mf_001_base_72, AidDcd
result-dir = "/mnt/data"

[Config muc_sumo]
extends=D2D_General, withSumoPeds
**.channelModel.tolerateMaxDistViolation = true
*.visualization.sceneVisualizer.typename = "OpenStreetMapSceneCanvasVisualizer"
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/munich/osm/munich_clean.osm")
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1

*.coordConverter.typename = "OsgCoordConverterSumo"
*.coordConverter.netFile = xmldoc("sumo/munich/munich.net.xml")


[Config muc_sumo_multiEnb]
extends=muc_sumo
*.numEnb = 6
*.eNB[*].mobility.initFromDisplayString = false
*.eNB[*].nicType = "LteNicEnbD2D"
*.eNB[*].lteNic.mac.amcMode = "D2D"
*.eNB[*].mobility.coordinateSystemModule = "coordConverter"
# X2
*.eNB[*].numX2Apps = 5 # numEnb -1
*.eNB[*].x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

*.eNB[0].mobility.initialLatitude = 48.1605deg # closer to second cell
#*.eNB[0].mobility.initialLatitude =  48.1649055deg
#*.eNB[0].mobility.initialLongitude = 11.585573deg
*.eNB[0].mobility.initialLongitude = 11.584073deg
*.eNB[0].x2App[0].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[0].x2App[1].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[0].x2App[2].client.connectAddress = "eNB[3]%x2ppp0" 
*.eNB[0].x2App[3].client.connectAddress = "eNB[4]%x2ppp0" 
*.eNB[0].x2App[4].client.connectAddress = "eNB[5]%x2ppp0" 

*.eNB[1].mobility.initialLatitude = 48.1498385deg
*.eNB[1].mobility.initialLongitude = 11.5849309deg
*.eNB[1].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[1].x2App[1].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[1].x2App[2].client.connectAddress = "eNB[3]%x2ppp0" 
*.eNB[1].x2App[3].client.connectAddress = "eNB[4]%x2ppp0" 
*.eNB[1].x2App[4].client.connectAddress = "eNB[5]%x2ppp0" 


*.eNB[2].mobility.initialLatitude = 48.1569504deg
*.eNB[2].mobility.initialLongitude = 11.5748965deg
*.eNB[2].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[2].x2App[1].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[2].x2App[2].client.connectAddress = "eNB[3]%x2ppp0" 
*.eNB[2].x2App[3].client.connectAddress = "eNB[4]%x2ppp0" 
*.eNB[2].x2App[4].client.connectAddress = "eNB[5]%x2ppp0" 


*.eNB[3].mobility.initialLatitude = 48.1529036deg
*.eNB[3].mobility.initialLongitude = 11.5708115deg
*.eNB[3].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[3].x2App[1].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[3].x2App[2].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[3].x2App[3].client.connectAddress = "eNB[4]%x2ppp0" 
*.eNB[3].x2App[4].client.connectAddress = "eNB[5]%x2ppp0" 

*.eNB[4].mobility.initialLatitude = 48.1608159deg
*.eNB[4].mobility.initialLongitude = 11.5751882deg
*.eNB[4].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[4].x2App[1].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[4].x2App[2].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[4].x2App[3].client.connectAddress = "eNB[3]%x2ppp0" 
*.eNB[4].x2App[4].client.connectAddress = "eNB[5]%x2ppp0" 

*.eNB[5].mobility.initialLatitude = 48.1503035deg
*.eNB[5].mobility.initialLongitude = 11.5772382deg
*.eNB[5].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[5].x2App[1].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[5].x2App[2].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[5].x2App[3].client.connectAddress = "eNB[3]%x2ppp0" 
*.eNB[5].x2App[4].client.connectAddress = "eNB[4]%x2ppp0" 


*.pNode[*].lteNic.phy.dynamicCellAssociation = true
**.lteNic.phy.enableHandover = true


[Config mucSumo_1]
extends = muc_sumo_multiEnb, World_lte, pApp_AlterSenderReceiver
# multiple eNB with with handover 2 Pedestrians and simple AlterSenderReceiver
*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/2peds_handover_together.sumo.cfg")


[Config mucSumo_2]
extends = muc_sumo_multiEnb, World_lte_dcd
# multiple eNB with with handover 2 Pedestrians and simple AlterSenderReceiver
#*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/2peds_handover_together.sumo.cfg")
# 60 pedestrians with random trips
*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/munich_ped60.sumo.cfg")

[Config mucSumo_120]
extends = muc_sumo_multiEnb, World_lte_dcd
# multiple eNB with with handover 2 Pedestrians and simple AlterSenderReceiver
#*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/2peds_handover_together.sumo.cfg")
# 60 pedestrians with random trips
*.traci.launcher.sumoCfgBase = absFilePath("sumo/munich/munich_ped120.sumo.cfg")


*.pNode[*].numApps = 4
# alert application for additonal D2D-traffic
*.pNode[*].app[0].typename = "AlertSender"
*.pNode[*].app[0].localPort = 1000 #3088+ancestorIndex(0)
*.pNode[*].app[0].startTime = uniform(0s,0.02s)
*.pNode[*].app[0].stopTime = 0s # 0:= never
*.pNode[*].app[0].destAddress = "224.0.0.1" # ALL_HOST_MCAST (automatically joined)
*.pNode[*].app[0].destPort = 1001
*.pNode[*].app[0].period = 100ms
*.pNode[*].app[1].typename = "AlertReceiver"
*.pNode[*].app[1].localPort = 1001
# density map setup
*.pNode[*].app[2..3].typename = "CrownetUdpApp"
*.pNode[*].app[2].app.typename = "DensityMapAppSimple"
*.pNode[*].app[2].socket.destPort = 30001
*.pNode[*].app[2].socket.localPort = 30001
*.pNode[*].app[2].app.appMainInterval = 2s
*.pNode[*].app[2].app.startTime = uniform(0s,0.02s)
*.pNode[*].app[2].app.mapTypeLog = "mean"	# only log selected
*.pNode[*].app[2].app.mapType = "mean"
*.pNode[*].app[3].app.typename = "BeaconSimple"
*.pNode[*].app[3].socket.destPort = 30002
*.pNode[*].app[3].socket.localPort = 30002
*.pNode[*].app[3].app.startTime = uniform(0s,0.02s)
# neighborhoodTable for density map
*.pNode[*].nTable.typename = "crownet.common.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 7s
 
