[General]
network = crownet.simulations.networks.World
image-path=../../images
print-undisposed = true

#============= Simulation parameters ================
sim-time-limit= 40s
repeat = 1

#============= Statistics ===========================
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

experiment-label = ${datetime} # use ${experiment}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out
seed-set = ${repetition}

**.vector-recording = false
**.scalar-recording = true
**.routingRecorder.enabled = false


#============= Mobility parameters ==================
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

#============= AMC module parameters ===============
**.ueTxPower = 20
**.eNodeBTxPower = 20
**.numRbDl = 20
**.numRbUl = 20
**.numBands = 20

#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz


#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel.shadowing = true
**.channelModel.scenario = "URBAN_MICROCELL"
**.channelModel.nodeb_height = 25
**.channelModel.ue_height = 1.5
**.channelModel.building_height = 20

**.channelModel.street_wide = 20
**.channelModel.carrierFrequency = 2.6  # carrier frequency (in GHz)
**.channelModel.antennaGainUe = 0
**.channelModel.antennGainEnB = 0

**.channelModel.correlation_distance = 25
**.channelModel.dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel.fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel.fading = false        # Enable/disable fading
**.channelModel.fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel.fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel.delay_rms = 363e-9

**.channelModel.extCell_interference = false # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel.downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel.uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel.d2d_interference = true      # if true, enables the interference computation for D2D connections

#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 5000000B              # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)


#=============  defaults  ===========
# eNodeB
*.numEnb=1
*.eNB[0].mobility.initFromDisplayString = false
*.eNB[0].mobility.initialX = 20m
*.eNB[0].mobility.initialY = 20m
*.eNB[*].nicType = "LteNicEnbD2D"
*.eNB[*].lteNic.mac.amcMode = "D2D"

# (person and vehicle)
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nicType = "LteNicUeD2D"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].lteNic.mac.amcMode = "D2D" #"D2D"
*.*Node[*].lteNic.address = "auto"

# Misc
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nicType = "LteNicUeD2D"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].lteNic.mac.amcMode = "D2D" #"D2D"
*.misc[*].lteNic.address = "auto"

**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")

# PhysicalEnviroment (*.physicalEnvironment.config set by other config)
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m

**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")


[Config D2D_General]

## Enrolled multicast groups (TraCI) for person and vehicle ##
#  Must be set in the HostAutoConfigurator (instead of ip4Config.xml), seperated by a single space character
*.*Node[*].configurator.interfaces = "cellular" #"wlan"
*.*Node[*].configurator.addressBase = "20.0.0.0"
*.*Node[*].configurator.netmask = "255.0.0.0"

**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data
*.eNB[*].lteNic.processingDelayIn = 1134us    # additional processing delays
*.eNB[*].lteNic.processingDelayOut = 1134us
*.*Node[*].lteNic.processingDelayIn = 5518us
*.*Node[*].lteNic.processingDelayOut = 1134us

# Misc (only set interface name. rest id done with ip4Config.xml)
*.misc[*].configurator.interfaces = "cellular" 
*.misc[*].lteNic.processingDelayIn = 5518us
*.misc[*].lteNic.processingDelayOut = 1134us


### Select CQI for D2D transmissions ###
# One-to-Many commulteNications work with fixed CQI values only. Set the parameter **.usePreconfiguredTxParams and
# select the desired CQI using the parameter **.d2dCqi
**.usePreconfiguredTxParams = true
**.d2dCqi = 7


#############################################
include ../networks/default_configs.ini
#############################################


# Setup enviroment setup
########################################################################

[Config env_mf_2peds]
extends=withVadere
*.traci.launcher.vadereScenarioPath = absFilePath("vadere/scenarios/mf_2peds.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_2peds_env.xml")

[Config env_test001]
# one wave of 4 pedestrians
extends=withVadere
*.traci.launcher.vadereScenarioPath = absFilePath("vadere/scenarios/test001.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/test001_env.xml")

[Config env_test002]
# two waves of 4 pedestrians 20 seconds apart
extends=withVadere
*.traci.launcher.vadereScenarioPath = absFilePath("vadere/scenarios/test002.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/test002_env.xml")

### Simple Vadere Test
[Config vadere_test001]
extends = D2D_General, env_test002, World_lte
*.pNode[*].app[0].typename = "CrownetUdpApp"


### one message from fixed node 1 hop. 
### Timed such only first wave will get the information.
[Config test_control001_aid]
extends = D2D_General, env_test002, World_lte_control
*.traci.mapper.personType = "crownet.nodes.AidPedestrian"
*.pNode[*].useAid = true
*.pNode[*].numApps = 1
*.pNode[*].app[0].typename = "CrownetAidApp"
*.pNode[*].app[0].app.typename = "BroadcastControlApp" 
*.pNode[*].app[0].app.mainInterval = -1.0s  # passive mode
*.pNode[*].app[0].app.messageLength = 500B 
*.pNode[*].app[0].app.isControlled = true
*.pNode[*].app[0].socket.destAddresses = "224.0.0.1" # ALL_HOST_MCAST
*.pNode[*].app[0].socket.destPort = 1002
*.pNode[*].app[0].socket.localPort = 1002
*.numMisc =1
*.misc[*].typename = "crownet.nodes.AidPedestrian"
*.misc[*].middleware.typename = ""
*.misc[0].useAid = true
*.misc[0].numApps = 1
*.misc[0].mobility.typename = "StationaryMobility"
*.misc[0].mobility.initialX = 5m
*.misc[0].mobility.initialY = 2m
*.misc[0].mobility.initFromDisplayString = false
*.misc[0].app[0].typename = "CrownetAidApp"
*.misc[0].app[0].app.typename = "BroadcastControlApp" 
*.misc[0].app[0].app.mainInterval = 1.0s  # active mode
*.misc[0].app[0].app.mainMsgLimit = 1  # only one message
*.misc[0].app[0].app.hopCount = 0  # no rebroadcast
*.misc[0].app[0].app.messageLength = 500B 
*.misc[0].app[0].app.isControlled = false 
*.misc[0].app[0].socket.destAddresses = "224.0.0.1" # ALL_HOST_MCAST
*.misc[0].app[0].socket.destPort = 1002
*.misc[0].app[0].socket.localPort = 1002

### Same as test_control001_aid but with Udp apps. Still use AidPedestrian.
### The Aidlayer must be transparent for UDP applications
[Config test_control001_udp]
extends = test_control001_aid
*.pNode[*].app[0].typename = "CrownetUdpApp"
*.misc[0].app[0].typename = "CrownetUdpApp"

### Same as test_control001_aid but with Udp apps and switch to 
### ApplicationLayerPedestrian which does not have an aid layer
[Config test_control001_udp_only]
extends = test_control001_udp
*.pNode[*].app[0].typename = "CrownetUdpApp"
*.misc[0].app[0].typename = "CrownetUdpApp"
**.useAid  = false
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"



### 30 message from fixed node 1 hop with intervall of 1s. 
### Both waves will recieve the information
[Config test_control002_aid]
extends = test_control001_aid
*.misc[0].app[0].app.mainInterval = 1.0s  # active mode
*.misc[0].app[0].app.mainMsgLimit = 30 


### Same as test_control001_aid but with Udp apps. Still use AidPedestrian.
### The Aidlayer must be transparent for UDP applications
[Config test_control002_udp]
extends = test_control002_aid
*.pNode[*].app[0].typename = "CrownetUdpApp"
*.misc[0].app[0].typename = "CrownetUdpApp"

### Same as test_control001_aid but with Udp apps and switch to 
### ApplicationLayerPedestrian which does not have an aid layer
[Config test_control002_udp_only]
extends = test_control001_udp
*.pNode[*].app[0].typename = "CrownetUdpApp"
*.misc[0].app[0].typename = "CrownetUdpApp"
**.useAid  = false
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"

[Config sumo_crossing_peds]
extends = D2D_General, withSumoPeds, World_lte, pApp_AlterSenderReceiver
*.traci.launcher.sumoCfgBase = absFilePath("sumo/example_peds.sumo.cfg")
*.coordConverter.netFile  = xmldoc(absFilePath("sumo/example.net.xml"))
*.visualization.sceneVisualizer.typename = "SumoSceneCanvasVisualizer"
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/example.net.xml")
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1



[Config sumo_crossing_peds_cars]
extends = D2D_General, withSumoBoth, World_lte, pApp_AlterSenderReceiver, vApp_AlterSenderReceiver
*.traci.launcher.sumoCfgBase = absFilePath("sumo/example_peds_cars.sumo.cfg")
*.coordConverter.netFile = xmldoc(absFilePath("sumo/example.net.xml"))
*.visualization.sceneVisualizer.typename = "SumoSceneCanvasVisualizer"
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/example.net.xml")
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1



[Config test_DcD]
extends = D2D_General, env_mf_2peds, aidDcd_default, pApp_AlterSenderReceiverVRU
*.traci.mapper.personType = "crownet.nodes.AidPedestrian"
*.pNode[2].app[*].stopTime = 5s # stop beacon and dcdMap (should trigger removal from neighborhood table  after t > 15s)
*.pNode[2].aid.densityMap.app.stopTime = 5s # stop beacon and dcdMap (should trigger removal from neighborhood table  after t > 15s)
*.pNode[2].aid.beacon.app.stopTime = 5s # stop beacon and dcdMap (should trigger removal from neighborhood table  after t > 15s)


[Config test_DcDwArtery]
extends = D2D_General, env_mf_2peds, aidDcd_withArtery, app_VRU
*.traci.mapper.personType = "crownet.nodes.AidPedestrian"
*.pNode[2].app[*].stopTime = 5s # stop beacon and dcdMap (should trigger removal from neighborhood table  after t > 15s)
*.pNode[2].aid.densityMap.app.stopTime = 5s # stop beacon and dcdMap (should trigger removal from neighborhood table  after t > 15s)
*.pNode[2].aid.beacon.app.stopTime = 5s # stop beacon and dcdMap (should trigger removal from neighborhood table  after t > 15s)



