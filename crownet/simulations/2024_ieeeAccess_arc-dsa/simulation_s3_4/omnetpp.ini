[General]
network = crownet.simulations.multi_enb.World
image-path=../../images
print-undisposed = true
num-rngs = 2  # seperate random base for entropy map

#============= Simulation parameters ================
sim-time-limit=400s
#warmup-period=60s      # Note: When analyzing the results, you need to apply the same warmup-period to measurement data!

### includes
###include include ./eNB_settings.ini

[Config _enb_default]
*.eNB[*].mobility.initFromDisplayString = false
#*.eNB[*].mobility.typename = "CrownetStationaryMobility"
*.eNB[*].nicType = "LteNicEnbD2D"
*.eNB[*].cellularNic.mac.amcMode = "D2D"
*.eNB[*].mobility.coordinateSystemModule = "coordConverter"
**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data

# handover + dynamicCellAssociation
*.pNode[*].cellularNic.phy.dynamicCellAssociation = true
*.vNode[*].cellularNic.phy.dynamicCellAssociation = true
*.misc[*].cellularNic.phy.dynamicCellAssociation = true
**.cellularNic.phy.enableHandover = true


[Config _gnb_default]

*.numEnb = 0
*.useNR = true
*.gNB[*].nicType = "NRNicEnb"
*.gNB[*].mobility.initFromDisplayString = false
*.gNB[*].mobility.coordinateSystemModule = "coordConverter"
*.gNB[*].cellularNic.mac.amcMode = "D2D"
**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data

# handover + dynamicCellAssociation
*.pNode[*].cellularNic.phy.dynamicCellAssociation = true
*.vNode[*].cellularNic.phy.dynamicCellAssociation = true
*.misc[*].cellularNic.phy.dynamicCellAssociation = true
*.pNode[*].cellularNic.nrPhy.dynamicCellAssociation = true
*.vNode[*].cellularNic.nrPhy.dynamicCellAssociation = true
*.misc[*].cellularNic.nrPhy.dynamicCellAssociation = true
**.cellularNic.phy.enableHandover = true


[Config eNB_mf_m_single_cell]
# Enb Settings
extends = _enb_default
*.numEnb = 1
*.eNB[0].mobility.initialLatitude = 48.162190092718085deg
*.eNB[0].mobility.initialLongitude = 11.586633415916312deg
# single cell: 
# - no handover / dynamicCellAssociation
# - use configured cell (id = 1)
*.pNode[*].cellularNic.phy.dynamicCellAssociation = false
*.vNode[*].cellularNic.phy.dynamicCellAssociation = false
*.misc[*].cellularNic.phy.dynamicCellAssociation = false
**.cellularNic.phy.enableHandover = false
*.pNode[*].cellularNic.phy.macCellId = 1
*.vNode[*].cellularNic.phy.macCellId = 1
*.misc[*].cellularNic.phy.macCellId = 1
*.pNode[*].cellularNic.phy.masterId = 1
*.vNode[*].cellularNic.phy.masterId = 1
*.misc[*].cellularNic.phy.masterId = 1

[Config enb_1d_1]
extends = _enb_default
# Enb Settings
*.numEnb = 1
*.eNB[0].mobility.initialLatitude = 48.162190092718085deg
*.eNB[0].mobility.initialLongitude = 11.586633415916312deg
# single cell: 
# - no handover / dynamicCellAssociation
# - use configured cell (id = 1)
*.pNode[*].cellularNic.phy.dynamicCellAssociation = false
*.vNode[*].cellularNic.phy.dynamicCellAssociation = false
*.misc[*].cellularNic.phy.dynamicCellAssociation = false
**.cellularNic.phy.enableHandover = false
*.pNode[*].cellularNic.phy.macCellId = 1
*.vNode[*].cellularNic.phy.macCellId = 1
*.misc[*].cellularNic.phy.macCellId = 1
*.pNode[*].cellularNic.phy.masterId = 1
*.vNode[*].cellularNic.phy.masterId = 1
*.misc[*].cellularNic.phy.masterId = 1

[Config enb_muc_2]
extends = _enb_default
# Enb Settings

*.numEnb = 2
*.eNB[0].mobility.initialLatitude = 48.162190092718085deg
##*.eNB[0].mobility.initialLongitude = 11.584633415916312deg
*.eNB[0].mobility.initialLongitude = 11.574633415916312deg

#*.eNB[0].mobility.initialX = 380m
#*.eNB[0].mobility.initialY = 352m
*.eNB[0].x2App[0].client.connectAddress = "eNB[1]%x2ppp0" 

*.eNB[1].mobility.initialLatitude = 48.162190092718085deg
*.eNB[1].mobility.initialLongitude = 11.589433415916312deg
*.eNB[1].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 

#*.pNode[*].cellularNic.phy.dynamicCellAssociation = true
#*.vNode[*].cellularNic.phy.dynamicCellAssociation = true
#*.misc[*].cellularNic.phy.dynamicCellAssociation = true

*.pNode[*].cellularNic.phy.dynamicCellAssociation = false
*.vNode[*].cellularNic.phy.dynamicCellAssociation = false
*.misc[*].cellularNic.phy.dynamicCellAssociation = false
**.cellularNic.phy.enableHandover = false
*.pNode[*].cellularNic.phy.macCellId = 1
*.vNode[*].cellularNic.phy.macCellId = 1
*.misc[*].cellularNic.phy.macCellId = 1
*.pNode[*].cellularNic.phy.masterId = 1
*.vNode[*].cellularNic.phy.masterId = 1
*.misc[*].cellularNic.phy.masterId = 1

# X2
*.eNB[*].numX2Apps = 1
*.eNB[*].x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

[Config gnb_1d_2]
extends = _gnb_default
# Enb Settings

*.numEnb = 0
*.numGnb = 2
*.gNB[0].mobility.initialLatitude = 48.162190092718085deg
*.gNB[0].mobility.initialLongitude = 11.584633415916312deg
*.gNB[0].x2App[0].client.connectAddress = "gNB[1]%x2ppp0" 

*.gNB[1].mobility.initialLatitude = 48.162190092718085deg
*.gNB[1].mobility.initialLongitude = 11.589433415916312deg
*.gNB[1].x2App[0].client.connectAddress = "gNB[0]%x2ppp0" 

*.pNode[*].cellularNic.phy.dynamicCellAssociation = true
*.vNode[*].cellularNic.phy.dynamicCellAssociation = true
*.misc[*].cellularNic.phy.dynamicCellAssociation = true

# X2
*.eNB[*].numX2Apps = 1
*.eNB[*].x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)


[Config eNB_mf_m]
extends = _enb_default
# Enb Settings
*.numEnb = 5



# X2
*.eNB[*].numX2Apps = 4 # numEnb -1
*.eNB[*].x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

*.eNB[0].mobility.initialLatitude = 48.1611075739651deg # closer to second cell
*.eNB[0].mobility.initialLongitude = 11.58496314178364deg
*.eNB[0].x2App[0].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[0].x2App[1].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[0].x2App[2].client.connectAddress = "eNB[3]%x2ppp0" 
*.eNB[0].x2App[3].client.connectAddress = "eNB[4]%x2ppp0" 

*.eNB[1].mobility.initialLatitude = 48.16102065541025deg
*.eNB[1].mobility.initialLongitude = 11.58817930793272deg
*.eNB[1].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[1].x2App[1].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[1].x2App[2].client.connectAddress = "eNB[3]%x2ppp0" 
*.eNB[1].x2App[3].client.connectAddress = "eNB[4]%x2ppp0" 

*.eNB[2].mobility.initialLatitude = 48.1633792566954deg
*.eNB[2].mobility.initialLongitude = 11.588552454281507deg
*.eNB[2].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[2].x2App[1].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[2].x2App[2].client.connectAddress = "eNB[3]%x2ppp0" 
*.eNB[2].x2App[3].client.connectAddress = "eNB[4]%x2ppp0" 

*.eNB[3].mobility.initialLatitude = 48.163880988708485deg
*.eNB[3].mobility.initialLongitude = 11.584803221919875deg
*.eNB[3].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[3].x2App[1].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[3].x2App[2].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[3].x2App[3].client.connectAddress = "eNB[4]%x2ppp0" 

*.eNB[4].mobility.initialLatitude = 48.162190092718085deg
*.eNB[4].mobility.initialLongitude = 11.586633415916312deg
*.eNB[4].x2App[0].client.connectAddress = "eNB[0]%x2ppp0" 
*.eNB[4].x2App[1].client.connectAddress = "eNB[1]%x2ppp0" 
*.eNB[4].x2App[2].client.connectAddress = "eNB[2]%x2ppp0" 
*.eNB[4].x2App[3].client.connectAddress = "eNB[3]%x2ppp0" ###include include ./eNB_settings.ini END

# include ./enb_hex_r650_muc_clean5x3.ini
# include ./misc_hex_r650_muc_clean5x3.ini

###include include ./enb_hex_r500_muc_clean5x3.ini

[Config enb_5x3]
extends = _enb_default

*.numEnb = 15
*.eNB[*].x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
# eNB 0
*.eNB[0].numX2Apps = 3
*.eNB[0].mobility.initialLongitude = 11.566385603894245deg
*.eNB[0].mobility.initialLatitude = 48.15462103910422deg
*.eNB[0].x2App[0].client.connectAddress = "eNB[6]%x2ppp0"
*.eNB[0].x2App[1].client.connectAddress = "eNB[5]%x2ppp0"
*.eNB[0].x2App[2].client.connectAddress = "eNB[1]%x2ppp0"

# eNB 1
*.eNB[1].numX2Apps = 3
*.eNB[1].mobility.initialLongitude = 11.577793044247699deg
*.eNB[1].mobility.initialLatitude = 48.14986663567277deg
*.eNB[1].x2App[0].client.connectAddress = "eNB[2]%x2ppp0"
*.eNB[1].x2App[1].client.connectAddress = "eNB[6]%x2ppp0"
*.eNB[1].x2App[2].client.connectAddress = "eNB[0]%x2ppp0"

# eNB 2
*.eNB[2].numX2Apps = 5
*.eNB[2].mobility.initialLongitude = 11.589650798326808deg
*.eNB[2].mobility.initialLatitude = 48.15409888684261deg
*.eNB[2].x2App[0].client.connectAddress = "eNB[8]%x2ppp0"
*.eNB[2].x2App[1].client.connectAddress = "eNB[7]%x2ppp0"
*.eNB[2].x2App[2].client.connectAddress = "eNB[6]%x2ppp0"
*.eNB[2].x2App[3].client.connectAddress = "eNB[1]%x2ppp0"
*.eNB[2].x2App[4].client.connectAddress = "eNB[3]%x2ppp0"

# eNB 3
*.eNB[3].numX2Apps = 3
*.eNB[3].mobility.initialLongitude = 11.601055879884015deg
*.eNB[3].mobility.initialLatitude = 48.14934221329673deg
*.eNB[3].x2App[0].client.connectAddress = "eNB[4]%x2ppp0"
*.eNB[3].x2App[1].client.connectAddress = "eNB[8]%x2ppp0"
*.eNB[3].x2App[2].client.connectAddress = "eNB[2]%x2ppp0"

# eNB 4
*.eNB[4].numX2Apps = 3
*.eNB[4].mobility.initialLongitude = 11.612915327823474deg
*.eNB[4].mobility.initialLatitude = 48.153572029993235deg
*.eNB[4].x2App[0].client.connectAddress = "eNB[9]%x2ppp0"
*.eNB[4].x2App[1].client.connectAddress = "eNB[8]%x2ppp0"
*.eNB[4].x2App[2].client.connectAddress = "eNB[3]%x2ppp0"

# eNB 5
*.eNB[5].numX2Apps = 4
*.eNB[5].mobility.initialLongitude = 11.566834220651689deg
*.eNB[5].mobility.initialLatitude = 48.16360893860828deg
*.eNB[5].x2App[0].client.connectAddress = "eNB[11]%x2ppp0"
*.eNB[5].x2App[1].client.connectAddress = "eNB[10]%x2ppp0"
*.eNB[5].x2App[2].client.connectAddress = "eNB[0]%x2ppp0"
*.eNB[5].x2App[3].client.connectAddress = "eNB[6]%x2ppp0"

# eNB 6
*.eNB[6].numX2Apps = 6
*.eNB[6].mobility.initialLongitude = 11.578243578628646deg
*.eNB[6].mobility.initialLatitude = 48.15885446213735deg
*.eNB[6].x2App[0].client.connectAddress = "eNB[7]%x2ppp0"
*.eNB[6].x2App[1].client.connectAddress = "eNB[11]%x2ppp0"
*.eNB[6].x2App[2].client.connectAddress = "eNB[5]%x2ppp0"
*.eNB[6].x2App[3].client.connectAddress = "eNB[0]%x2ppp0"
*.eNB[6].x2App[4].client.connectAddress = "eNB[1]%x2ppp0"
*.eNB[6].x2App[5].client.connectAddress = "eNB[2]%x2ppp0"

# eNB 7
*.eNB[7].numX2Apps = 6
*.eNB[7].mobility.initialLongitude = 11.590103470917775deg
*.eNB[7].mobility.initialLatitude = 48.163086622597184deg
*.eNB[7].x2App[0].client.connectAddress = "eNB[13]%x2ppp0"
*.eNB[7].x2App[1].client.connectAddress = "eNB[12]%x2ppp0"
*.eNB[7].x2App[2].client.connectAddress = "eNB[11]%x2ppp0"
*.eNB[7].x2App[3].client.connectAddress = "eNB[6]%x2ppp0"
*.eNB[7].x2App[4].client.connectAddress = "eNB[2]%x2ppp0"
*.eNB[7].x2App[5].client.connectAddress = "eNB[8]%x2ppp0"

# eNB 8
*.eNB[8].numX2Apps = 6
*.eNB[8].mobility.initialLongitude = 11.60151046890154deg
*.eNB[8].mobility.initialLatitude = 48.15832987530432deg
*.eNB[8].x2App[0].client.connectAddress = "eNB[9]%x2ppp0"
*.eNB[8].x2App[1].client.connectAddress = "eNB[13]%x2ppp0"
*.eNB[8].x2App[2].client.connectAddress = "eNB[7]%x2ppp0"
*.eNB[8].x2App[3].client.connectAddress = "eNB[2]%x2ppp0"
*.eNB[8].x2App[4].client.connectAddress = "eNB[3]%x2ppp0"
*.eNB[8].x2App[5].client.connectAddress = "eNB[4]%x2ppp0"

# eNB 9
*.eNB[9].numX2Apps = 4
*.eNB[9].mobility.initialLongitude = 11.613372055833432deg
*.eNB[9].mobility.initialLatitude = 48.1625596005263deg
*.eNB[9].x2App[0].client.connectAddress = "eNB[14]%x2ppp0"
*.eNB[9].x2App[1].client.connectAddress = "eNB[13]%x2ppp0"
*.eNB[9].x2App[2].client.connectAddress = "eNB[8]%x2ppp0"
*.eNB[9].x2App[3].client.connectAddress = "eNB[4]%x2ppp0"

# eNB 10
*.eNB[10].numX2Apps = 2
*.eNB[10].mobility.initialLongitude = 11.567283057211258deg
*.eNB[10].mobility.initialLatitude = 48.17259682083693deg
*.eNB[10].x2App[0].client.connectAddress = "eNB[5]%x2ppp0"
*.eNB[10].x2App[1].client.connectAddress = "eNB[11]%x2ppp0"

# eNB 11
*.eNB[11].numX2Apps = 5
*.eNB[11].mobility.initialLongitude = 11.578694333733667deg
*.eNB[11].mobility.initialLatitude = 48.16784227129901deg
*.eNB[11].x2App[0].client.connectAddress = "eNB[12]%x2ppp0"
*.eNB[11].x2App[1].client.connectAddress = "eNB[10]%x2ppp0"
*.eNB[11].x2App[2].client.connectAddress = "eNB[5]%x2ppp0"
*.eNB[11].x2App[3].client.connectAddress = "eNB[6]%x2ppp0"
*.eNB[11].x2App[4].client.connectAddress = "eNB[7]%x2ppp0"

# eNB 12
*.eNB[12].numX2Apps = 3
*.eNB[12].mobility.initialLongitude = 11.590556365292255deg
*.eNB[12].mobility.initialLatitude = 48.17207434101956deg
*.eNB[12].x2App[0].client.connectAddress = "eNB[11]%x2ppp0"
*.eNB[12].x2App[1].client.connectAddress = "eNB[7]%x2ppp0"
*.eNB[12].x2App[2].client.connectAddress = "eNB[13]%x2ppp0"

# eNB 13
*.eNB[13].numX2Apps = 5
*.eNB[13].mobility.initialLongitude = 11.60196528062373deg
*.eNB[13].mobility.initialLatitude = 48.16731751995195deg
*.eNB[13].x2App[0].client.connectAddress = "eNB[14]%x2ppp0"
*.eNB[13].x2App[1].client.connectAddress = "eNB[12]%x2ppp0"
*.eNB[13].x2App[2].client.connectAddress = "eNB[7]%x2ppp0"
*.eNB[13].x2App[3].client.connectAddress = "eNB[8]%x2ppp0"
*.eNB[13].x2App[4].client.connectAddress = "eNB[9]%x2ppp0"

# eNB 14
*.eNB[14].numX2Apps = 2
*.eNB[14].mobility.initialLongitude = 11.613829007607936deg
*.eNB[14].mobility.initialLatitude = 48.17154715366985deg
*.eNB[14].x2App[0].client.connectAddress = "eNB[13]%x2ppp0"
*.eNB[14].x2App[1].client.connectAddress = "eNB[9]%x2ppp0"

# link configuration. Copy this to world configuration file. i.e. World.ned
# eNB[0].x2++ <--> Eth10G <--> eNB[1].x2++;
# eNB[0].x2++ <--> Eth10G <--> eNB[5].x2++;
# eNB[0].x2++ <--> Eth10G <--> eNB[6].x2++;
# eNB[1].x2++ <--> Eth10G <--> eNB[2].x2++;
# eNB[1].x2++ <--> Eth10G <--> eNB[6].x2++;
# eNB[2].x2++ <--> Eth10G <--> eNB[3].x2++;
# eNB[2].x2++ <--> Eth10G <--> eNB[6].x2++;
# eNB[2].x2++ <--> Eth10G <--> eNB[7].x2++;
# eNB[2].x2++ <--> Eth10G <--> eNB[8].x2++;
# eNB[3].x2++ <--> Eth10G <--> eNB[4].x2++;
# eNB[3].x2++ <--> Eth10G <--> eNB[8].x2++;
# eNB[4].x2++ <--> Eth10G <--> eNB[8].x2++;
# eNB[4].x2++ <--> Eth10G <--> eNB[9].x2++;
# eNB[5].x2++ <--> Eth10G <--> eNB[6].x2++;
# eNB[5].x2++ <--> Eth10G <--> eNB[10].x2++;
# eNB[5].x2++ <--> Eth10G <--> eNB[11].x2++;
# eNB[6].x2++ <--> Eth10G <--> eNB[7].x2++;
# eNB[6].x2++ <--> Eth10G <--> eNB[11].x2++;
# eNB[7].x2++ <--> Eth10G <--> eNB[8].x2++;
# eNB[7].x2++ <--> Eth10G <--> eNB[11].x2++;
# eNB[7].x2++ <--> Eth10G <--> eNB[12].x2++;
# eNB[7].x2++ <--> Eth10G <--> eNB[13].x2++;
# eNB[8].x2++ <--> Eth10G <--> eNB[9].x2++;
# eNB[8].x2++ <--> Eth10G <--> eNB[13].x2++;
# eNB[9].x2++ <--> Eth10G <--> eNB[13].x2++;
# eNB[9].x2++ <--> Eth10G <--> eNB[14].x2++;
# eNB[10].x2++ <--> Eth10G <--> eNB[11].x2++;
# eNB[11].x2++ <--> Eth10G <--> eNB[12].x2++;
# eNB[12].x2++ <--> Eth10G <--> eNB[13].x2++;
# eNB[13].x2++ <--> Eth10G <--> eNB[14].x2++;
###include include ./enb_hex_r500_muc_clean5x3.ini END
###include include ./misc_hex_r500_muc_clean5x3.ini

[Config misc_static_position]
*.numMisc = 15
*.misc[0].mobility.initialLongitude = 11.566654250991824deg
*.misc[0].mobility.initialLatitude = 48.154615036658825deg
*.misc[1].mobility.initialLongitude = 11.578061664124013deg
*.misc[1].mobility.initialLatitude = 48.14986060700919deg
*.misc[2].mobility.initialLongitude = 11.589919437780267deg
*.misc[2].mobility.initialLatitude = 48.1540928300714deg
*.misc[3].mobility.initialLongitude = 11.601324492084307deg
*.misc[3].mobility.initialLatitude = 48.14933613031777deg
*.misc[4].mobility.initialLongitude = 11.613183959564225deg
*.misc[4].mobility.initialLatitude = 48.153565918900085deg
*.misc[5].mobility.initialLongitude = 11.56710291458435deg
*.misc[5].mobility.initialLatitude = 48.16360293428046deg
*.misc[6].mobility.initialLongitude = 11.578512245326234deg
*.misc[6].mobility.initialLatitude = 48.15884843158319deg
*.misc[7].mobility.initialLongitude = 11.590372157201552deg
*.misc[7].mobility.initialLatitude = 48.163080563926556deg
*.misc[8].mobility.initialLongitude = 11.601779127918318deg
*.misc[8].mobility.initialLatitude = 48.15832379041778deg
*.misc[9].mobility.initialLongitude = 11.613640734399695deg
*.misc[9].mobility.initialLatitude = 48.16255348751674deg
*.misc[10].mobility.initialLongitude = 11.567551798001885deg
*.misc[10].mobility.initialLatitude = 48.172590814626055deg
*.misc[11].mobility.initialLongitude = 11.578963047275398deg
*.misc[11].mobility.initialLatitude = 48.1678362388536deg
*.misc[12].mobility.initialLongitude = 11.590825098429226deg
*.misc[12].mobility.initialLatitude = 48.172068280448855deg
*.misc[13].mobility.initialLongitude = 11.602233986479865deg
*.misc[13].mobility.initialLatitude = 48.16731143315716deg
*.misc[14].mobility.initialLongitude = 11.61409773302258deg
*.misc[14].mobility.initialLatitude = 48.17154103874322deg
###include include ./misc_hex_r500_muc_clean5x3.ini END


[Config Defaults]

#============= Statistics ===========================
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
experiment-label = ${datetime} # use ${experiment}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out
seed-set = ${repetition}



*.server.**.vector-recording = false
*.router.**.vector-recording = false
*.pgw.**.vector-recording = false

*.*NB[*].pos*.result-recording-modes = +vector
*.*NB[*].pos*.vector-recording=true
*.*NB[*].cellularNic.mac.sentPacketToLowerLayer.result-recording-modes = histogram(packetBytes),-vector(packetBytes)
*.*NB[*].cellularNic.mac.receivedPacketFromLowerLayer.result-recording-modes = histogram(packetBytes),-vector(packetBytes)
*.*NB[*].cellularNic.mac.measuredItbs.result-recording-modes = stats,-vector,+histogram
*.*NB[*].cellularNic.mac.avgServedBlocksUl.result-recording-modes = stats,vector,+histogram
*.*NB[*].cellularNic.mac.avgServedBlocksDl.result-recording-modes = stats,-vector,+histogram
#
*.*NB[*].cellularNic.phy.**.result-recording-modes = +vector
*.*NB[*].cellularNic.mac.**.result-recording-modes = +vector
*.*NB[*].cellularNic.mac.**.vector-recording = true
*.*NB[*].cellularNic.phy.**.vector-recording = true
#
*.*NB[*].sctp.**.vector-recording = false
*.*NB[*].x2ppp[*].**.vector-recording = false
*.*NB[*].ppp*.**.vector-recording = false
*.*NB[*].udp.**.vector-recording = false


*.*Node[*].pos*.result-recording-modes = +vector
*.*Node[*].pos*.vector-recording=true
*.*Node[*].udp.**.vector-recording = false
*.*Node[*].cellularNic.rlc.**.vector-recording = false
*.*Node[*].app[*].packetMeter*.**.vector-recording = false
*.*Node[*].lo.**.vector-recording = false
*.*Node[*].cellularNic.pdcpRrc.**.vector-recording = false
#mac
*.*Node[*].cellularNic.mac.sentPacketTo*.result-recording-modes = histogram(packetBytes),-vector(packetBytes)
*.*Node[*].cellularNic.mac.receivedPacket*.result-recording-modes = histogram(packetBytes),-vector(packetBytes)
*.*Node[*].cellularNic.mac.macDelay*.result-recording-modes = histogram,-vector
*.*Node[*].cellularNic.mac.harq*.result-recording-modes = histogram,-vector
*.*Node[*].cellularNic.mac.macThroughput*.result-recording-modes = histogram,-vector
*.*Node[*].cellularNic.mac.macPacketLoss*.result-recording-modes = histogram,-vector
#channelmodel
*.*Node[*].cellularNic.channelModel[*].measuredSinr*.result-recording-modes = histogram,-vector
*.*Node[*].cellularNic.channelModel[*].distance.vector-recording = false
#phy
*.*Node[*].cellularNic.phy.averageCqiD2D.result-recording-modes = histogram,-vector
#
*.*Node[*].cellularNic.phy.**.result-recording-modes = +vector
*.*Node[*].cellularNic.mac.**.result-recording-modes = +vector
*.*Node[*].cellularNic.mac.**.vector-recording = true
*.*Node[*].cellularNic.phy.**.vector-recording = true

*.misc[*].pos*.result-recording-modes = +vector
*.misc[*].pos*.vector-recording=true
*.misc[*].udp.**.vector-recording = false
*.misc[*].cellularNic.rlc.**.vector-recording = false
*.misc[*].app[*].packetMeter*.**.vector-recording = false
*.misc[*].lo.**.vector-recording = false
*.misc[*].cellularNic.pdcpRrc.**.vector-recording = false
#mac
*.misc[*].cellularNic.mac.sentPacketTo*.result-recording-modes = histogram(packetBytes),-vector(packetBytes)
*.misc[*].cellularNic.mac.receivedPacket*.result-recording-modes = histogram(packetBytes),-vector(packetBytes)
*.misc[*].cellularNic.mac.macDelay*.result-recording-modes = histogram,-vector
*.misc[*].cellularNic.mac.harq*.result-recording-modes = histogram,-vector
*.misc[*].cellularNic.mac.macThroughput*.result-recording-modes = histogram,-vector
*.misc[*].cellularNic.mac.macPacketLoss*.result-recording-modes = histogram,-vector
#channelmodel
*.misc[*].cellularNic.channelModel[*].measuredSinr*.result-recording-modes = histogram,-vector
*.misc[*].cellularNic.channelModel[*].distance.vector-recording = false
#phy
*.misc[*].cellularNic.phy.averageCqiD2D.result-recording-modes = histogram,-vector
#
*.misc[*].cellularNic.phy.**.result-recording-modes = +vector
*.misc[*].cellularNic.mac.**.result-recording-modes = +vector
*.misc[*].cellularNic.mac.**.vector-recording = true
*.misc[*].cellularNic.phy.**.vector-recording = true


# used for autmated study
**.scalar-recording = true
**.vector-recording = true
**.statistic-recording = true
**.routingRecorder.enabled = false

#============= Mobility parameters ==================
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
# PhysicalEnviroment (*.physicalEnvironment.config set by other config)
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m

#============= AMC module parameters ===============
**.ueTxPower = 23 # default 26
**.d2dTxPower = 23 # default 26
**.eNodeBTxPower = 43 # default 46


#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600MHz
**.numComponentCarriers = 1
**.componentCarrier[0].carrierFrequency = 2600MHz

#**.numComponentCarriers = 2
#**.componentCarrier[0].carrierFrequency = 2600MHz
#**.componentCarrier[1].carrierFrequency = 2400MHz
**.numBands = 25	# componentCarrier


#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel[*].shadowing = true
**.channelModel[*].scenario = "URBAN_MACROCELL"
**.channelModel[*].nodeb_height = 25
**.channelModel[*].ue_height = 1.5
**.channelModel[*].building_height = 20

**.channelModel[*].street_wide = 20
**.channelModel[*].tolerateMaxDistViolation = true
**.channelModel[*].correlation_distance = 25

**.channelModel[*].antennaGainUe = 0
**.channelModel[*].antennGainEnB = 18 # default 18


**.channelModel[*].dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel[*].fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel[*].fading = true        # Enable/disable fading
**.channelModel[*].fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel[*].fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel[*].delay_rms = 363e-9

**.channelModel[*].extCell_interference = true # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel[*].downlink_interference = false # deactivate as neighboring cells usse same carrier frequency
**.channelModel[*].uplink_interference = false   # deactivate as neighboring cells usse same carrier frequency
**.channelModel[*].d2d_interference = true      # if true, enables the interference computation for D2D connections

#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 300000B  	            # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)

# global parameters
**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")


[Config Defaults_4G]
extends = Defaults
*.useNR = false
# (person and vehicle aka pNode and vNode)
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nicType = "LteNicUeD2D"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.*Node[*].cellularNic.address = "auto"

# Misc
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nicType = "LteNicUeD2D"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.misc[*].cellularNic.address = "auto"

[Config Defaults_5G]
extends = Defaults
*.useNR = true
# (person and vehicle aka pNode and vNode)
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nrMasterId = 1
*.*Node[*].nicType = "NRNicUe"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.*Node[*].cellularNic.address = "auto"

# Misc
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nrMasterId = 1
*.misc[*].nicType = "NRNicUe"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.misc[*].cellularNic.address = "auto"


[Config World_dcd]

*.hasCellular = true
*.hasStoryboard = false
*.hasWlan = false

*.flowController.typename = "" 

# avg = (1-alpha)*avg + alpha*new_val (rtpc)
**.packetMeter.alpha = 0.0625


[Config D2D_General]
extends = World_dcd
# Default D2D config
# World contains nodes in 3 different vectors
# pNode (pedestrians), vNode(vehicles) 
# and misc(stationary nodes not controlled by any mobility provider
# To allow communication between all the need to be in the same 
# multicast group
## Enrolled multicast groups (TraCI) for person and vehicle ##
#  Must be set in the HostAutoConfigurator (instead of ip4Config.xml), seperated by a single space character
# for vNode[*] and pNode[*]
*.*Node[*].ipv4.configurator.interfaces = "cellular" #"wlan"
*.*Node[*].ipv4.configurator.addressBase = "20.0.0.0"
*.*Node[*].ipv4.configurator.netmask = "255.0.0.0"
*.*Node[*].cellularNic.processingDelayIn = 5518us
*.*Node[*].cellularNic.processingDelayOut = 1134us
*.*Node[*].cellularNic.phy.d2dEnforceEnbBoundOnSideLink = true

# todo processingDelayIN/OUT in 5G?
**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data
*.eNB[*].cellularNic.processingDelayIn = 1134us    # additional processing delays
*.eNB[*].cellularNic.processingDelayOut = 1134us

# Misc (only set interface name. Rest is done with ip4Config.xml)
*.misc[*].ipv4.configurator.interfaces = "cellular" 
*.misc[*].cellularNic.processingDelayIn = 5518us
*.misc[*].cellularNic.processingDelayOut = 1134us
*.misc[*].cellularNic.phy.d2dEnforceEnbBoundOnSideLink = true


### Select CQI for D2D transmissions ###
# One-to-Many communications work with fixed CQI values only. Set the parameter **.usePreconfiguredTxParams and
# select the desired CQI using the parameter **.d2dCqi
**.usePreconfiguredTxParams = true
**.d2dCqi = 7


# Setup mobility provider
########################################################################


[Config noTraCI]
*.traci.typename = ""
*.flowController.typename =  ""
*.hasStoryboard = false


[Config globalMapSetup]
# Density Map (misc and pNode)
*.globalDensityMap.typename = "GlobalDensityMap"
*.globalDensityMap.vectorNodeModule = "misc" # pNode managed by BonnMotion
*.globalDensityMap.nodeModules = ""
*.globalDensityMap.traciModuleListener = ""		# no TraCI used
*.globalDensityMap.useSignalMapInit = false		# no TraCI used	
*.globalDensityMap.writeMapInterval = 1000ms
*.globalDensityMap.writerType = "sql"
*.globalDensityMap.mapSqlMaxCommitCount = 400

# Entropy Map (misc and pNode)
*.globalMeasurementMap.typename = "GlobalEntropyMap"
*.globalMeasurementMap.vectorNodeModule = "misc" # pNode managed by BonnMotion
*.globalMeasurementMap.nodeModules = ""
*.globalMeasurementMap.traciModuleListener = ""		# no TraCI used
*.globalMeasurementMap.useSignalMapInit = false		# no TraCI used	
*.globalMeasurementMap.writeMapInterval = 1000ms
*.globalMeasurementMap.writerType = "sql"
*.globalMeasurementMap.mapSqlMaxCommitCount = 400


*.globalMeasurementMap.entropyInterval = 1s
#*.globalMeasurementMap.entropyProvider = crownet::UniformEntropy{ 
#		minValue: 1.0, maxValue: 30.0, 
#		cellSelectionPropability: 0.70 }
*.globalMeasurementMap.entropyProvider = crownet::RndOffsetPolynomialEntropy{ coefficients : [0.0, 1.0,], cellSelectionPropability : 1.0, minValue: 10.0, maxValue: 30.0}

*.fileWriterRegister.typename = ""


[Config _pnode_bonn_motion]
*.bonnMotionServer.typename = "BonnMotionMobilityServer"
*.bonnMotionServer.moduleType  = "crownet.nodes.ApplicationLayerPedestrian"
*.bonnMotionServer.vectorNode  = "pNode"
*.pNode[*].mobility.typename = "BonnMotionMobilityClient"
*.pNode[*].middleware.typename = ""
*.pNode[*].useArtery = false
*.pNode[*].useVadere = false
*.pNode[*].typename =  "crownet.nodes.ApplicationLayerPedestrian"


[Config _pnode_app]
**.cellSize = 10.0m
## All apps ##
*.pNode[*].numApps = 3
*.pNode[*].app[*].socket.typename = "UdpSocketManager"
*.pNode[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.pNode[*].app[*].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.pNode[*].app[*].scheduler.checkNetworkConnectivity = true

## Beacon ##
*.pNode[*].app[0].typename = "BeaconApp"
*.pNode[*].app[0].app.typename = "BeaconDynamic"
*.pNode[*].app[0].app.appendResourceSharingDomainId = true
*.pNode[*].app[0].app.startTime = uniform(0s,1000ms)
### Beacon scheduling ###
#generationInterval --> lower bound
*.pNode[*].app[0].scheduler.generationInterval = 500ms
*.pNode[*].app[0].scheduler.estimatedAvgPaketSize = 300b
*.pNode[*].app[0].scheduler.maxApplicationBandwidth = 50kbps
*.pNode[*].app[0].scheduler.numberPackets  = 1

## Density Map ##
*.pNode[*].app[1].typename = "DensityMapApp"
*.pNode[*].app[1].app.typename = "DensityMapAppSimple"
*.pNode[*].app[1].app.startTime = 0s
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 40.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder", \
	appendRessourceSharingDomainId: true, \
	logType: "sql"}
### Density Map scheduling ###
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.pNode[*].app[1].scheduler.generationInterval = 2s
*.pNode[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[1].scheduler.maxApplicationBandwidth = 150kbps
*.pNode[*].app[1].scheduler.numberPackets  = -1
#*.pNode[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.pNode[*].app[1].scheduler.amountOfData  = -1B # based on fair share of application bandwidth 
*.pNode[*].app[1].app.maxPduLength = 1400B

## Neighborhood Table ##
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 15s	# TTL

## Entropy Map ##
*.pNode[*].app[2].typename = "DensityMapApp"
*.pNode[*].app[2].socket.destPort = 30003
*.pNode[*].app[2].socket.localPort = 30003
*.pNode[*].app[2].app.typename = "EntropyMapAppSimple"
*.pNode[*].app[2].app.startTime = 0s
*.pNode[*].app[2].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 3600.0s, \
	alpha: 1.0, \
	stepDist: 999.0, \
	idStreamType: "insertionOrder", \
	appendRessourceSharingDomainId: true, \
	logType: "sql"}
###  Entropy Map scheduling ### log: ymfPlusDistStep
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.pNode[*].app[2].scheduler.generationInterval = 2s
*.pNode[*].app[2].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[2].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[2].scheduler.maxApplicationBandwidth = 1Mbps
*.pNode[*].app[2].scheduler.numberPackets  = -1
#*.pNode[*].app[2].scheduler.amountOfData  = 200MB # complet map
*.pNode[*].app[2].scheduler.amountOfData  = -1B # based on fair share of application bandwidth 
*.pNode[*].app[2].app.maxPduLength = 1400B

## Neighborhood Client Table ##
*.pNode[*].nTableClient.typename = "EntropyNeigborhoodTableClient"
*.pNode[*].nTableClient.globalTable = "globalMeasurementMap"
*.pNode[*].nTableClient.distance =  10.0 
#no max age for server/client based neighborhood table. There are no packets in this implementation
*.pNode[*].app[2].app.neighborhoodTableModule = ".nTableClient"

[Config pNodeCfg]
extends = _pnode_bonn_motion, _pnode_app

[Config _misc_static]
extends = misc_static_position
*.misc[*].middleware.typename = ""
*.misc[*].mobility.typename = "StationaryMobility"
*.misc[*].mobility.coordinateSystemModule = "coordConverter"
*.misc[*].mobility.initFromDisplayString = false
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"

[Config _misc_app]
**.cellSize = 10.0m
## All apps ##
*.misc[*].numApps = 3
*.misc[*].app[*].socket.typename = "UdpSocketManager"
*.misc[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.misc[*].app[*].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.misc[*].app[*].scheduler.checkNetworkConnectivity = true

## Beacon ##
*.misc[*].app[0].typename = "BeaconApp"
*.misc[*].app[0].app.typename = "BeaconDynamic"
*.misc[*].app[0].app.appendResourceSharingDomainId = true
*.misc[*].app[0].app.startTime = uniform(0s,1000ms)
### Beacon scheduling ###
#generationInterval --> lower bound
*.misc[*].app[0].scheduler.generationInterval = 500ms
*.misc[*].app[0].scheduler.estimatedAvgPaketSize = 300b
*.misc[*].app[0].scheduler.maxApplicationBandwidth = 50kbps
*.misc[*].app[0].scheduler.numberPackets  = 1


## Density Map ##
*.misc[*].app[1].typename = "DensityMapApp"
*.misc[*].app[1].app.typename = "DensityMapAppSimple"
*.misc[*].app[1].app.startTime = 0s
*.misc[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 40.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder", \
	appendRessourceSharingDomainId: true, \
	logType: "sql"}
### Density Map scheduling ###
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.misc[*].app[1].scheduler.generationInterval = 2s
*.misc[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[*].app[1].scheduler.maxApplicationBandwidth = 150kbps
*.misc[*].app[1].scheduler.numberPackets  = -1
#*.misc[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.misc[*].app[1].scheduler.amountOfData  = -1B # based on fair share of application bandwidth
*.misc[*].app[1].app.maxPduLength = 1400B

## Neighborhood Table ##
*.misc[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.misc[*].nTable.maxAge = 15s	# TTL

## Entropy Map ##
*.misc[*].app[2].typename = "DensityMapApp"
*.misc[*].app[2].socket.destPort = 30003
*.misc[*].app[2].socket.localPort = 0003
*.misc[*].app[2].app.typename = "EntropyMapAppSimple"
*.misc[*].app[2].app.startTime = 0s
*.misc[*].app[2].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 3600.0s, \
	alpha: 1.0, \
	stepDist: 999.0, \
	idStreamType: "insertionOrder", \
	appendRessourceSharingDomainId: true, \
	logType: "sql"}
###  Entropy Map scheduling ### log: ymfPlusDistStep
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.misc[*].app[2].scheduler.generationInterval = 2s
*.misc[*].app[2].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[*].app[2].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[*].app[2].scheduler.maxApplicationBandwidth = 1Mbps
*.misc[*].app[2].scheduler.numberPackets  = -1
#*.misc[*].app[2].scheduler.amountOfData  = 200MB # complet map
*.misc[*].app[2].scheduler.amountOfData  = -1B # based on fair share of application bandwidth 
*.misc[*].app[2].app.maxPduLength = 1400B

## Neighborhood Client Table ##
*.misc[*].nTableClient.typename = "EntropyNeigborhoodTableClient"
*.misc[*].nTableClient.globalTable = "globalMeasurementMap"
*.misc[*].nTableClient.distance =  10.0 # only use current cell
*.misc[*].app[2].app.neighborhoodTableModule = ".nTableClient"
#*.misc[*].nTableClient.maxAge = 5s	# TTL

[Config miscNodeCfg]
extends = _misc_static, _misc_app

[Config networkSettings]
extends = Defaults_4G, D2D_General, enb_5x3

[Config cmd_debug]
cmdenv-express-mode = false
cmdenv-log-prefix = ""
#*.pNode[0].app[*].**.cmdenv-log-level = debug
*.globalDensityMap.cmdenv-log-level = debug
*.globalMeasurementMap.cmdenv-log-level = debug
**.cmdenv-log-level = off

[Config with_vis]

*.visualization.sceneVisualizer.typename = "SumoSceneCanvasVisualizer"
*.visualization.sceneVisualizer.mapFile = xmldocGz("sumo/munich/muc_cleaned/muc.net.xml.gz")
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1
*.*visualization.physicalEnvironmentVisualizer.typename = "PhysicalEnvironmentCanvasVisualizer"



[Config topo_muc_5kx3k]
#extends = noTraCI, stat_misc, pedestrian_beacon_map_udp, misc_beacon_map_udp
*.coordConverter.typename = "OsgCoordConverterSumo"
*.coordConverter.netFile = xmldocGz("sumo/munich/muc_cleaned/muc.net.xml.gz")
*.mapVisualizer.typename = "" # area to big

#*.bonnMotionServer.traceFile = "sumo/munich/muc_cleaned/output/cleaned_network/bonnmotion_2/000___muc.bonnmotion.gz"
#*.bonnMotionServer.traceFile = "sumo/munich/muc_cleaned/output/muc_steady_state_short_cleaned/bonnmotion/000___muc.bonnmotion.gz"
#*.bonnMotionServer.traceFile = "traces/004___muc_1k.bonnmotion.gz"
*.bonnMotionServer.traceFile = "sumo/munich/muc_cleaned_r500_5x3_enb/output/muc_steady_state_short_cleaned/bonnmotion/000___muc.bonnmotion.gz"


[Config final_multi_enb]
extends = topo_muc_5kx3k, networkSettings, noTraCI, globalMapSetup, pNodeCfg, miscNodeCfg
sim-time-limit = 60.0s
#cmdenv-status-frequency = 600s # every 10 min.
cmdenv-status-frequency = 600s # every 10 min.


[Config final_multi_enb_dev]
extends = final_multi_enb
description = "DEV"
sim-time-limit = 70.0s
result-dir = "/mnt/data1tb/results/multi_enb/"
#cmdenv-express-mode = false
#cmdenv-log-prefix = ""
#*.eNB[*].cellularNic.mac.cmdenv-log-level = debug
#**.cmdenv-log-level = off




[Config final_multi_enb_30_min]
extends = final_multi_enb
result-dir = "/mnt/data1tb/results/multi_enb/"
sim-time-limit = 1800.0s

#sim-time-limit = 60s

