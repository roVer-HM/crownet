
# If you use wildcards, the order of entries is important; 
# This means that you need to list specific settings first, and more general ones later. Catch-all settings should come last. 

[General]
network = crownet.simulations.networks.World
image-path=../../images
print-undisposed = true
num-rngs = 2  # ?? necessary

sim-time-limit = 600s
experiment-label = "_output"
seed-set = 0

[Config final]

*.hasCellular = true
*.hasStoryboard = false
*.hasWlan = false

#============= AMC module parameters ===============
**.ueTxPower = 20 #20
**.d2dTxPower = 20 #26 #15
**.eNodeBTxPower = 20  #DBm

#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz
**.componentCarrier[0].carrierFrequency = 2600MHz
**.numBands = 25	# componentCarrier

#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel[0].shadowing = true
**.channelModel[0].scenario = "URBAN_MICROCELL" #"URBAN_MACROCELL"
**.channelModel[0].nodeb_height = 25
**.channelModel[0].ue_height = 1.5
**.channelModel[0].building_height = 20

**.channelModel[0].street_wide = 20
**.channelModel[0].tolerateMaxDistViolation = true
**.channelModel[0].correlation_distance = 25

**.channelModel[0].antennaGainUe = 0
**.channelModel[0].antennGainEnB = 0


**.channelModel[0].dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel[0].fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel[0].fading = true        # Enable/disable fading
**.channelModel[0].fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel[0].fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel[0].delay_rms = 363e-9

**.channelModel[0].extCell_interference = true # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel[0].downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel[0].uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel[0].d2d_interference = true      # if true, enables the interference computation for D2D connections

#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 300000B  	            # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data // one bearer for all data

**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)


**.cellularNic.phy.enableHandover = false
**.packetMeter.alpha = 0.0625 
**.identiyRegistryModule = "identiyRegistry" # ? manage signals
**.usePreconfiguredTxParams = true
**.d2dCqi = 7

# access ?
*.configurator.config = xmldoc("ip4Config.xml")

###############################################################################
############################### simulator exchange ############################
###############################################################################

**.useVadere = true
*.traci.launcher.typename = "VadereLauncher"
*.traci.launcher.hostname = "vadere"
*.traci.launcher.port = 9998

*.traci.core.typename = "VadereCore"
*.traci.core.version = -1
*.traci.core.selfStopping = false

*.flowController.typename =  "crownet.control.ControlManager"
*.flowController.host = "flowcontrol"
*.flowController.port = 9997
*.flowController.coreModule = "traci.core"

###############################################################################
################################# scenario ####################################
###############################################################################

**.vadereScenarioPath = absFilePath("vadere/scenarios/route_choice_real_world.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/route_choice_real_world.xml")

**.coordConverterModule = "coordConverter"
*.coordConverter.coreModule ="traci.core"
*.coordConverter.typename = "OsgCoordConverterLocal" # "OsgCoordConverterVadere" "??"
*.coordConverter.srs_code = "+proj=utm +zone=32 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
*.coordConverter.offset_x = -692273.8894735108m
*.coordConverter.offset_y = -5337503.5661007995m
*.coordConverter.xBound = 164.10m
*.coordConverter.yBound = 215.10m

## make env large enough
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
*.physicalEnvironment.spaceMinX = -1000m
*.physicalEnvironment.spaceMinY = -1000m
*.physicalEnvironment.spaceMinZ = -1000m
*.physicalEnvironment.spaceMaxX = 2000m
*.physicalEnvironment.spaceMaxY = 2000m
*.physicalEnvironment.spaceMaxZ = 2000m

###############################################################################
############################### base station ################################
###############################################################################

*.numEnb = 1
# define position
*.eNB[0].mobility.initialLatitude = 48.162508763131214deg
*.eNB[0].mobility.initialLongitude = 11.586633130789131deg
*.eNB[0].mobility.initFromDisplayString = false
*.eNB[0].mobility.coordinateSystemModule = "coordConverter"

*.eNB[0].nicType = "LteNicEnbD2D"
*.eNB[0].cellularNic.mac.amcMode = "D2D"
*.eNB[0].cellularNic.processingDelayIn = 1134us    # additional processing delays
*.eNB[0].cellularNic.processingDelayOut = 1134us

###############################################################################
################################# pedestrians #################################
###############################################################################


# 40% of the pedestrians use the apps
*.pNode[*{0..3}].numApps = 3
*.pNode[*{4..9}].numApps = 0

# define mobility behavior
*.traci.nodes.personNode = "pNode"
*.traci.nodes.typename = "VadereNodeManager"
*.traci.nodes.personSinkModule = ".mobility"
*.traci.nodes.vehicleSinkModule = ".mobility"

*.traci.mapper.typename = "VadereModuleMapper"
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
*.traci.subscriptions.typename = "VadereSubscriptionManager"

## representation in omnetpp-ide
*.pNode[*].mobility.visualRepresentation = "^"

# assign pedestrians to base station 0
*.pNode[*].macCellId = 1
*.pNode[*].masterId = 1
*.pNode[*].nicType = "LteNicUeD2D"
*.pNode[*].radioDriver.dispatchInterfaceName = "cellular"
### ?? what is the difference here?
*.pNode[*].cellularNic.mac.amcMode = "D2D" 
*.pNode[*].cellularNic.address = "auto"
*.pNode[*].cellularNic.phy.dynamicCellAssociation = false
*.pNode[*].cellularNic.phy.macCellId = 1
*.pNode[*].cellularNic.phy.masterId = 1
*.pNode[*].cellularNic.processingDelayIn = 5518us
*.pNode[*].cellularNic.processingDelayOut = 1134us

# assign pedestrians to a multicast group
*.pNode[*].ipv4.configurator.interfaces = "cellular" 
*.pNode[*].ipv4.configurator.addressBase = "20.0.0.0"
*.pNode[*].ipv4.configurator.netmask = "255.0.0.0"

# app definition
*.pNode[*].app[*].socket.typename = "UdpSocketManager" # use udp for any paket ...
## app 0: receive route information
*.pNode[*].app[0].typename = "CrownetUdpApp"
*.pNode[*].app[0].app.typename = "BroadcastControlApp"
*.pNode[*].app[0].app.packetLength = 500B
*.pNode[*].app[0].app.isControlled = true
*.pNode[*].app[0].scheduler.typename = "EventTriggerdSchedulerSimple"
*.pNode[*].app[0].socket.destAddresses = "224.0.0.1" # ALL_HOST_MCAST
*.pNode[*].app[0].socket.destPort = 1002
*.pNode[*].app[0].socket.localPort = 1002

## app 1: density map
*.globalDensityMap.typename = "GlobalDensityMap" # ? brauche ich das?
*.globalDensityMap.useSignalMapInit = true 

*.pNode[*].app[1].typename = "DensityMapApp"
*.pNode[*].app[1].app.typename = "DensityMapAppSimple"
*.pNode[*].app[1].app.appendResourceSharingDomainId = true
*.pNode[*].app[1].app.startTime = 0s
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: false, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder"}
## scheduler
*.pNode[*].app[1].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.pNode[*].app[1].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.pNode[*].app[1].scheduler.generationInterval = 2s
*.pNode[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[1].scheduler.maxApplicationBandwidth = 500kbps
*.pNode[*].app[1].scheduler.numberPackets  = -1
*.pNode[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.pNode[*].app[1].app.maxPduLength = 1400B
**.cellSize = 2.0m

## app 2: beacon app
*.pNode[*].app[2].typename = "BeaconApp"
*.pNode[*].app[2].app.typename = "BeaconDynamic"
*.pNode[*].app[2].app.appendResourceSharingDomainId = true
## scheduler
*.pNode[*].app[2].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.pNode[*].app[2].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.pNode[*].app[2].scheduler.generationInterval = 500ms
*.pNode[*].app[2].scheduler.estimatedAvgPaketSize = 300b
*.pNode[*].app[2].scheduler.maxApplicationBandwidth = 50kbps
*.pNode[*].app[2].scheduler.numberPackets  = 1
*.pNode[*].app[2].scheduler.startOffset = 1001ms 
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 5s


###############################################################################
##################################### relay_node ##############################
###############################################################################


# relay node that measures densities and sends route information
*.numMisc = 1

# define position 
*.misc[0].middleware.typename = ""
*.misc[0].mobility.typename = "StationaryMobility"
*.misc[0].mobility.coordinateSystemModule = "coordConverter"
*.misc[0].mobility.initFromDisplayString = false
*.misc[0].typename = "crownet.nodes.ApplicationLayerPedestrian"
*.misc[0].mobility.initialLatitude = 48.162508763131214deg
*.misc[0].mobility.initialLongitude = 11.586633130789131deg
*.misc[0].mobility.initialX = 68.2m
*.misc[0].mobility.initialY = 40.3m

# assign misc to base station 0
*.misc[0].macCellId = 1
*.misc[0].masterId = 1
*.misc[0].nicType = "LteNicUeD2D"
*.misc[0].radioDriver.dispatchInterfaceName = "cellular"
*.misc[0].cellularNic.mac.amcMode = "D2D" #"D2D"
*.misc[0].cellularNic.address = "auto"
*.misc[0].cellularNic.phy.dynamicCellAssociation = false
*.misc[0].cellularNic.phy.macCellId = 1
*.misc[0].cellularNic.phy.masterId = 1
*.misc[0].cellularNic.processingDelayIn = 5518us
*.misc[0].cellularNic.processingDelayOut = 1134us
*.misc[0].ipv4.configurator.interfaces = "cellular"

# define apps
*.misc[0].numApps = 3
*.misc[0].app[*].socket.typename = "UdpSocketManager"

# app 0: send rerouting information
*.misc[0].app[0].typename = "CrownetUdpApp"
*.misc[0].app[0].app.typename = "BroadcastControlApp"
*.misc[0].app[0].app.hopCount = 0  # no rebroadcast
*.misc[0].app[0].app.packetLength = 500B
*.misc[0].app[0].app.isControlled = false
*.misc[0].app[0].scheduler.typename = "EventTriggerdSchedulerSimple"
*.misc[0].app[0].socket.destAddresses = "224.0.0.1" # ALL_HOST_MCAST
*.misc[0].app[0].socket.destPort = 1002
*.misc[0].app[0].socket.localPort = 1002
*.misc[0].app[0].app.startTime = 0.0s

# app 1: density map (is based on app 2)
## app 1: app configuration
*.globalDensityMap.typename = "GlobalDensityMap" #? brauche ich das??
*.globalDensityMap.useSignalMapInit = true 

*.misc[0].app[1].typename = "DensityMapApp"
*.misc[0].app[1].app.typename = "DensityMapAppSimple"
*.misc[0].app[1].app.appendResourceSharingDomainId = true
*.misc[0].app[1].app.startTime = 0s
*.misc[0].app[1].app.maxPduLength = 1400B
*.misc[0].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder"}
## scheduler
*.misc[0].app[1].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.misc[0].app[1].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.misc[0].app[1].scheduler.generationInterval = 2s
*.misc[0].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[0].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[0].app[1].scheduler.maxApplicationBandwidth = 500kbps
*.misc[0].app[1].scheduler.numberPackets  = -1
*.misc[0].app[1].scheduler.amountOfData  = 200MB # complet map

# app 2: beacon app
*.misc[0].app[2].typename = "BeaconApp"
*.misc[0].app[2].app.typename = "BeaconDynamic"
*.misc[0].app[2].app.appendResourceSharingDomainId = true
*.misc[0].app[2].app.startTime = uniform(0s,1000ms)
## scheduler
*.misc[0].app[2].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.misc[0].app[2].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.misc[0].app[2].scheduler.generationInterval = 30000s # never send own position
*.misc[0].app[2].scheduler.estimatedAvgPaketSize = 300b
*.misc[0].app[2].scheduler.maxApplicationBandwidth = 50kbps
*.misc[0].app[2].scheduler.numberPackets  = 1
*.misc[0].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.misc[0].nTable.maxAge = 5s

###############################################################################
###########################  logging ##########################################
###############################################################################

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out

**.scalar-recording = true
cmdenv-express-mode = true
cmdenv-log-prefix = ""
**.cmdenv-log-level = debug

World.eNB[*].cellularNic.**.cmdenv-log-level = off
World.pNode[*].cellularNic.**.cmdenv-log-level = off
World.misc[*].cellularNic.**.cmdenv-log-level = off

**.routingRecorder.enabled = false

*.server.**.vector-recording = false
*.eNB[*].sctp.**.vector-recording = false
*.eNB[*].**.vector-recording = true
*.eNB[*].cellularNic.mac.**.vector-recording = true
*.eNB[*].cellularNic.phy.**.vector-recording = true
*.eNB[*].pos*.result-recording-modes = +vector
*.eNB[*].pos*.vector-recording=true
*.eNB[*].cellularNic.mac.measuredItbs*.vector-recording = false
*.eNB[*].cellularNic.mac.sentPacketToLowerLayer*.vector-recording = false
*.eNB[*].cellularNic.mac.receivedPacketFromLowerLayer*.vector-recording = false

*.*Node[*].app[*].**.vector-recording = true
*.*Node[*].app[*].packetMeter*.*.vector-recording = false
*.*Node[*].app[*].app.*DataRate.throughput.interval = 1s
*.*Node[*].nTable.**.vector-recording = true
*.*Node[*].cellularNic.phy.**.vector-recording = true
*.*Node[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.*Node[*].cellularNic.channelModel[*].**.vector-recording = true
*.*Node[*].cellularNic.**.vector-recording = false
*.*Node[*].pos*.result-recording-modes = +vector
*.*Node[*].pos*.vector-recording=true

*.misc[*].app[*].packetMeter*.*.vector-recording = false
*.misc[*].app[*].app.*DataRate.throughput.interval = 1s
*.misc[*].nTable.**.vector-recording = true
*.misc[*].cellularNic.phy.**.vector-recording = true
*.misc[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.misc[*].cellularNic.channelModel[*].**.vector-recording = true
*.misc[*].cellularNic.**.vector-recording = false
*.misc[*].pos*.result-recording-modes = +vector
*.misc[*].pos*.vector-recording=true
*.misc[*].cellularNic.phy.averageCqiD2D*.vector-recording = false
*.misc[*].cellularNic.channelModel[*].rcvdSinrUl*.vector-recording = true

*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}
*.globalDensityMap.writeMapInterval = 1000ms

[Config test]
extends = final

sim-time-limit = 21s
experiment-label = "test"




