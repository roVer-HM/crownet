#
# Default settings used by many simulations. Be carful when changing 
# values here because it my break other simulations. 
# 

# Usefull network level default settings.
########################################################################
[Config no_apps]
*.pNode[*].numApps = 0
*.vNode[*].numApps = 0
*.misc[*].numApps = 0


[Config pedestrian_beacon_map_udp]
**.cellSize = 5.0m
## All apps ##
*.pNode[*].numApps = 2
*.pNode[*].app[*].socket.typename = "UdpSocketManager"
*.pNode[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.pNode[*].app[*].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.pNode[*].app[*].scheduler.checkNetworkConnectivity = true

## Beacon ##
*.pNode[*].app[0].typename = "BeaconApp"
*.pNode[*].app[0].app.typename = "BeaconDynamic"
*.pNode[*].app[0].app.appendResourceSharingDomainId = true
*.pNode[*].app[0].app.startTime = uniform(0s,1000ms)
### Beacon scheduling ###
#generationInterval --> lower bound
*.pNode[*].app[0].scheduler.generationInterval = 500ms
*.pNode[*].app[0].scheduler.estimatedAvgPaketSize = 300b
*.pNode[*].app[0].scheduler.maxApplicationBandwidth = 50kbps
*.pNode[*].app[0].scheduler.numberPackets  = 1

## Density Map ##
*.pNode[*].app[1].typename = "DensityMapApp"
*.pNode[*].app[1].app.typename = "DensityMapAppSimple"
*.pNode[*].app[1].app.appendResourceSharingDomainId = true
*.pNode[*].app[1].app.startTime = 0s
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder"}
### Density Map scheduling ###
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.pNode[*].app[1].scheduler.generationInterval = 2s
*.pNode[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[1].scheduler.maxApplicationBandwidth = 500kbps
*.pNode[*].app[1].scheduler.numberPackets  = -1
*.pNode[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.pNode[*].app[1].app.maxPduLength = 1400B

## Log ##
*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}
*.globalDensityMap.writeMapInterval = 1000ms

## Neighborhood Table ##
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 5s	# TTL

[Config pedstrian_entropy_map_udp]
**.cellSize = 5.0m
## All apps ##
*.pNode[*].numApps = 1
*.pNode[*].app[*].socket.typename = "UdpSocketManager"
*.pNode[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.pNode[*].app[*].scheduler.neighborhoodSizeProvider = "" # do not use NT here
*.pNode[*].app[*].scheduler.checkNetworkConnectivity = true

## Density Map ##
*.pNode[*].app[0].typename = "DensityMapApp"
*.pNode[*].app[0].app.typename = "EntropyMapAppSimple"
*.pNode[*].app[0].app.appendResourceSharingDomainId = true
*.pNode[*].app[0].app.startTime = 0s
*.pNode[*].app[0].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder"}
### Density Map scheduling ###
# Schedule multiple packets in each interval
*.pNode[*].app[0].scheduler.typename = "DynamicMaxBandwidthScheduler"
#generationInterval --> lower bound
*.pNode[*].app[0].scheduler.generationInterval = 2s
*.pNode[*].app[0].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[0].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[0].scheduler.maxApplicationBandwidth = 500kbps
*.pNode[*].app[0].scheduler.numberPackets  = -1
*.pNode[*].app[0].scheduler.amountOfData  = 200MB
*.pNode[*].app[0].app.maxPduLength = 1400B

## Log ##
*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}
*.globalDensityMap.writeMapInterval = 1000ms

## Neighborhood Table ##
*.pNode[*].nTable.typename = "EntropyNeigborhoodTableClient"
#*.pNode[*].nTable.maxAge = 5s	# TTL
*.pNode[*].nTable.globalTable = "globalDensityMap"
*.pNode[*].nTable.distance = -1.0 # only use current cell

###############################################################################
###############################################################################
###############################################################################

[Config misc_beacon_map_udp]
**.cellSize = 5.0m
## All apps ##
*.misc[*].numApps = 2
*.misc[*].app[*].socket.typename = "UdpSocketManager"
*.misc[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.misc[*].app[*].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.misc[*].app[*].scheduler.checkNetworkConnectivity = true

## Beacon ##
*.misc[*].app[0].typename = "BeaconApp"
*.misc[*].app[0].app.typename = "BeaconDynamic"
*.misc[*].app[0].app.appendResourceSharingDomainId = true
*.misc[*].app[0].app.startTime = uniform(0s,10ms)
*.misc[*].app[0].app.packetLength = 1000B
### Beacon scheduling ###
#generationInterval --> lower bound
*.misc[*].app[0].scheduler.generationInterval = 500ms
*.misc[*].app[0].scheduler.estimatedAvgPaketSize = 300b
*.misc[*].app[0].scheduler.maxApplicationBandwidth = 50kbps
*.misc[*].app[0].scheduler.numberPackets  = 1


## Density Map ##
*.misc[*].app[1].typename = "DensityMapApp"
*.misc[*].app[1].app.typename = "DensityMapAppSimple"
*.misc[*].app[1].app.appendResourceSharingDomainId = true
*.misc[*].app[1].app.startTime = 0s
*.misc[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder"}
### Density Map scheduling ###
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.misc[*].app[1].scheduler.generationInterval = 2s
*.misc[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[*].app[1].scheduler.maxApplicationBandwidth = 150kbps
*.misc[*].app[1].scheduler.numberPackets  = -1
*.misc[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.misc[*].app[1].app.maxPduLength = 1400B


## Log ##
#*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.typename = ""
#*.fileWriterRegister.register = { \
#	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
#	}
*.globalDensityMap.writeMapInterval = 1000ms

## Neighborhood Table ##
*.misc[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.misc[*].nTable.maxAge = 5s	# TTL

[Config misc_entropy_map_udp]
**.cellSize = 5.0m
## All apps ##
*.misc[*].numApps = 1
*.misc[*].app[*].socket.typename = "UdpSocketManager"
*.misc[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.misc[*].app[*].scheduler.neighborhoodSizeProvider = "" # do not use NT here
*.misc[*].app[*].scheduler.checkNetworkConnectivity = true

## Density Map ##
*.misc[*].app[0].typename = "DensityMapApp"
*.misc[*].app[0].app.typename = "EntropyMapAppSimple"
*.misc[*].app[0].app.appendResourceSharingDomainId = true
*.misc[*].app[0].app.startTime = 0s
*.misc[*].app[0].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 1.0, \
	stepDist: 999.0, \
	idStreamType: "insertionOrder"}
### Density Map scheduling ### log: ymfPlusDistStep
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.misc[*].app[1].scheduler.generationInterval = 2s
*.misc[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[*].app[1].scheduler.maxApplicationBandwidth = 1Mbps
*.misc[*].app[1].scheduler.numberPackets  = -1
*.misc[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.misc[*].app[1].app.maxPduLength = 1400B


## Log ##
*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}
*.globalDensityMap.writeMapInterval = 1000ms

## Neighborhood Table ##
*.misc[*].nTable.typename = "EntropyNeigborhoodTableClient"
*.misc[*].nTable.globalTable = "globalDensityMap"
*.misc[*].nTable.distance =  -1.0 # only use current cell
