[General]
network = crownet.simulations.multi_enb.World
image-path=../../images
print-undisposed = true
num-rngs = 2  # seperate random base for entropy map

#============= Simulation parameters ================
sim-time-limit=400s
#warmup-period=60s      # Note: When analyzing the results, you need to apply the same warmup-period to measurement data!

### includes
include ./eNB_settings.ini
include ./enb_muc_clean5x3.ini
include ./misc_muc_clean5x3.ini


[Config Defaults]

#============= Statistics ===========================
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
experiment-label = ${datetime} # use ${experiment}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out
seed-set = ${repetition}

**.scalar-recording = true
#**.statistic-recording = false
**.routingRecorder.enabled = false

*.server.**.vector-recording = false
*.*NB[*].sctp.**.vector-recording = false
*.*NB[*].**.vector-recording = true
*.*NB[*].cellularNic.mac.**.vector-recording = true
*.*NB[*].cellularNic.phy.**.vector-recording = true
*.*NB[*].pos*.result-recording-modes = +vector
*.*NB[*].pos*.vector-recording=true

*.*Node[*].app[*].**.vector-recording = true
*.*Node[*].app[*].packetMeter*.*.vector-recording = false
*.*Node[*].app[*].app.*DataRate.throughput.interval = 1s
*.*Node[*].nTable.**.vector-recording = true
*.*Node[*].cellularNic.phy.**.vector-recording = true
*.*Node[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.*Node[*].cellularNic.channelModel[*].**.vector-recording = true
*.*Node[*].cellularNic.**.vector-recording = false
*.*Node[*].pos*.result-recording-modes = +vector
*.*Node[*].pos*.vector-recording=true

*.misc[*].app[*].packetMeter*.*.vector-recording = false
*.misc[*].app[*].app.*DataRate.throughput.interval = 1s
*.misc[*].nTable.**.vector-recording = true
*.misc[*].cellularNic.phy.**.vector-recording = true
*.misc[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.misc[*].cellularNic.channelModel[*].**.vector-recording = true
*.misc[*].cellularNic.**.vector-recording = false
*.misc[*].pos*.result-recording-modes = +vector
*.misc[*].pos*.vector-recording=true

#**.vector-recording = true

#============= Mobility parameters ==================
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
# PhysicalEnviroment (*.physicalEnvironment.config set by other config)
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m

#============= AMC module parameters ===============
**.ueTxPower = 26 # default 26
**.d2dTxPower = 26 # default 26
**.eNodeBTxPower = 46 # default 46


#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz
**.numComponentCarriers = 1
**.componentCarrier[0].carrierFrequency = 2600MHz

#**.numComponentCarriers = 2
#**.componentCarrier[0].carrierFrequency = 2600MHz
#**.componentCarrier[1].carrierFrequency = 2400MHz
**.numBands = 25	# componentCarrier


#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel[*].shadowing = true
**.channelModel[*].scenario = "URBAN_MICROCELL" #"URBAN_MACROCELL"
**.channelModel[*].nodeb_height = 25
**.channelModel[*].ue_height = 1.5
**.channelModel[*].building_height = 20

**.channelModel[*].street_wide = 20
**.channelModel[*].tolerateMaxDistViolation = true
**.channelModel[*].correlation_distance = 25

**.channelModel[*].antennaGainUe = 0
**.channelModel[*].antennGainEnB = 0


**.channelModel[*].dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel[*].fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel[*].fading = true        # Enable/disable fading
#**.channelModel[*].fading = false        # Enable/disable fading
**.channelModel[*].fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel[*].fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel[*].delay_rms = 363e-9

**.channelModel[*].extCell_interference = true # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel[*].downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel[*].uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel[*].d2d_interference = true      # if true, enables the interference computation for D2D connections

#*.misc[*].cellularNic.numCarriers = 2
#*.misc[*].cellularNic.channelModel[0].componentCarrierIndex = 0
#*.misc[*].cellularNic.channelModel[1].componentCarrierIndex = 1
#
#*.eNB[*].cellularNic.numCarriers=1
#*.eNB[0].cellularNic.channelModel[0].componentCarrierIndex = 0
#*.eNB[1].cellularNic.channelModel[0].componentCarrierIndex = 1

#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 300000B  	            # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)

# global parameters
**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")


[Config Defaults_4G]
extends = Defaults
*.useNR = false
# (person and vehicle aka pNode and vNode)
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nicType = "LteNicUeD2D"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.*Node[*].cellularNic.address = "auto"

# Misc
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nicType = "LteNicUeD2D"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.misc[*].cellularNic.address = "auto"

[Config Defaults_5G]
extends = Defaults
*.useNR = true
# (person and vehicle aka pNode and vNode)
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nrMasterId = 1
*.*Node[*].nicType = "NRNicUe"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.*Node[*].cellularNic.address = "auto"

# Misc
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nrMasterId = 1
*.misc[*].nicType = "NRNicUe"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.misc[*].cellularNic.address = "auto"


[Config World_dcd]

*.hasCellular = true
*.hasStoryboard = false
*.hasWlan = false

*.flowController.typename = "" 

# avg = (1-alpha)*avg + alpha*new_val (rtpc)
**.packetMeter.alpha = 0.0625


[Config D2D_General]
extends = World_dcd
# Default D2D config
# World contains nodes in 3 different vectors
# pNode (pedestrians), vNode(vehicles) 
# and misc(stationary nodes not controlled by any mobility provider
# To allow communication between all the need to be in the same 
# multicast group
## Enrolled multicast groups (TraCI) for person and vehicle ##
#  Must be set in the HostAutoConfigurator (instead of ip4Config.xml), seperated by a single space character
# for vNode[*] and pNode[*]
*.*Node[*].ipv4.configurator.interfaces = "cellular" #"wlan"
*.*Node[*].ipv4.configurator.addressBase = "20.0.0.0"
*.*Node[*].ipv4.configurator.netmask = "255.0.0.0"
*.*Node[*].cellularNic.processingDelayIn = 5518us
*.*Node[*].cellularNic.processingDelayOut = 1134us
*.*Node[*].cellularNic.phy.d2dEnforceEnbBoundOnSideLink = true

# todo processingDelayIN/OUT in 5G?
**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data
*.eNB[*].cellularNic.processingDelayIn = 1134us    # additional processing delays
*.eNB[*].cellularNic.processingDelayOut = 1134us

# Misc (only set interface name. Rest is done with ip4Config.xml)
*.misc[*].ipv4.configurator.interfaces = "cellular" 
*.misc[*].cellularNic.processingDelayIn = 5518us
*.misc[*].cellularNic.processingDelayOut = 1134us
*.misc[*].cellularNic.phy.d2dEnforceEnbBoundOnSideLink = true


### Select CQI for D2D transmissions ###
# One-to-Many communications work with fixed CQI values only. Set the parameter **.usePreconfiguredTxParams and
# select the desired CQI using the parameter **.d2dCqi
**.usePreconfiguredTxParams = true
**.d2dCqi = 7


# Setup mobility provider
########################################################################


[Config noTraCI]
*.traci.typename = ""
*.flowController.typename =  ""
*.hasStoryboard = false


[Config globalMapSetup]
# Density Map (misc and pNode)
*.globalDensityMap.typename = "GlobalDensityMap"
*.globalDensityMap.vectorNodeModule = "misc" # pNode managed by BonnMotion
*.globalDensityMap.nodeModules = ""
*.globalDensityMap.traciModuleListener = ""		# no TraCI used
*.globalDensityMap.useSignalMapInit = false		# no TraCI used	
*.globalDensityMap.writeMapInterval = 1000ms


# Entropy Map (misc and pNode)
*.globalMeasurementMap.typename = "GlobalEntropyMap"
*.globalMeasurementMap.vectorNodeModule = "misc" # pNode managed by BonnMotion
*.globalMeasurementMap.nodeModules = ""
*.globalMeasurementMap.traciModuleListener = ""		# no TraCI used
*.globalMeasurementMap.useSignalMapInit = false		# no TraCI used	
*.globalMeasurementMap.writeMapInterval = 1000ms

*.globalMeasurementMap.entropyInterval = 1s
#*.globalMeasurementMap.entropyProvider = crownet::UniformEntropy{ 
#		minValue: 1.0, maxValue: 30.0, 
#		cellSelectionPropability: 0.70 }
*.globalMeasurementMap.entropyProvider = crownet::RndOffsetPolynomialEntropy{ coefficients : [0.0, 1.0,], cellSelectionPropability : 1.0, minValue: 10.0, maxValue: 30.0}

*.fileWriterRegister.typename = ""


[Config _pnode_bonn_motion]
*.bonnMotionServer.typename = "BonnMotionMobilityServer"
*.bonnMotionServer.moduleType  = "crownet.nodes.ApplicationLayerPedestrian"
*.bonnMotionServer.vectorNode  = "pNode"
*.pNode[*].mobility.typename = "BonnMotionMobilityClient"
*.pNode[*].middleware.typename = ""
*.pNode[*].useArtery = false
*.pNode[*].useVadere = false
*.pNode[*].typename =  "crownet.nodes.ApplicationLayerPedestrian"


[Config _pnode_app]
**.cellSize = 5.0m
## All apps ##
*.pNode[*].numApps = 3
*.pNode[*].app[*].socket.typename = "UdpSocketManager"
*.pNode[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.pNode[*].app[*].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.pNode[*].app[*].scheduler.checkNetworkConnectivity = true

## Beacon ##
*.pNode[*].app[0].typename = "BeaconApp"
*.pNode[*].app[0].app.typename = "BeaconDynamic"
*.pNode[*].app[0].app.appendResourceSharingDomainId = true
*.pNode[*].app[0].app.startTime = uniform(0s,1000ms)
### Beacon scheduling ###
#generationInterval --> lower bound
*.pNode[*].app[0].scheduler.generationInterval = 500ms
*.pNode[*].app[0].scheduler.estimatedAvgPaketSize = 300b
*.pNode[*].app[0].scheduler.maxApplicationBandwidth = 50kbps
*.pNode[*].app[0].scheduler.numberPackets  = 1

## Density Map ##
*.pNode[*].app[1].typename = "DensityMapApp"
*.pNode[*].app[1].app.typename = "DensityMapAppSimple"
*.pNode[*].app[1].app.startTime = 0s
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder", \
	appendRessourceSharingDomoinId: true}
### Density Map scheduling ###
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.pNode[*].app[1].scheduler.generationInterval = 2s
*.pNode[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[1].scheduler.maxApplicationBandwidth = 150kbps
*.pNode[*].app[1].scheduler.numberPackets  = -1
#*.pNode[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.pNode[*].app[1].scheduler.amountOfData  = -1B # based on fair share of application bandwidth
*.pNode[*].app[1].app.maxPduLength = 1400B

## Neighborhood Table ##
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 5s	# TTL

## Entropy Map ##
*.pNode[*].app[2].typename = "DensityMapApp"
*.pNode[*].app[2].socket.destPort = 30003
*.pNode[*].app[2].socket.localPort = 30003
*.pNode[*].app[2].app.typename = "EntropyMapAppSimple"
*.pNode[*].app[2].app.startTime = 0s
*.pNode[*].app[2].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 1.0, \
	stepDist: 999.0, \
	idStreamType: "insertionOrder", \
	appendRessourceSharingDomoinId: true}
###  Entropy Map scheduling ### log: ymfPlusDistStep
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.pNode[*].app[2].scheduler.generationInterval = 2s
*.pNode[*].app[2].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[2].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[2].scheduler.maxApplicationBandwidth = 1Mbps
*.pNode[*].app[2].scheduler.numberPackets  = -1
*.pNode[*].app[2].scheduler.amountOfData  = 200MB # complet map
*.pNode[*].app[2].app.maxPduLength = 1400B

## Neighborhood Client Table ##
*.pNode[*].nTableClient.typename = "EntropyNeigborhoodTableClient"
*.pNode[*].nTableClient.globalTable = "globalMeasurementMap"
*.pNode[*].nTableClient.distance =  25.0 # only use current cell
#*.pNode[*].nTableClient.maxAge = 5s	# TTL
*.pNode[*].app[2].app.neighborhoodTableModule = ".nTableClient"

[Config pNodeCfg]
extends = _pnode_bonn_motion, _pnode_app

[Config _misc_static]
extends = misc_static_position
*.misc[*].middleware.typename = ""
*.misc[*].mobility.typename = "StationaryMobility"
*.misc[*].mobility.coordinateSystemModule = "coordConverter"
*.misc[*].mobility.initFromDisplayString = false
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"

[Config _misc_app]
**.cellSize = 5.0m
## All apps ##
*.misc[*].numApps = 3
*.misc[*].app[*].socket.typename = "UdpSocketManager"
*.misc[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.misc[*].app[*].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.misc[*].app[*].scheduler.checkNetworkConnectivity = true

## Beacon ##
*.misc[*].app[0].typename = "BeaconApp"
*.misc[*].app[0].app.typename = "BeaconDynamic"
*.misc[*].app[0].app.appendResourceSharingDomainId = true
*.misc[*].app[0].app.startTime = uniform(0s,1000ms)
### Beacon scheduling ###
#generationInterval --> lower bound
*.misc[*].app[0].scheduler.generationInterval = 500ms
*.misc[*].app[0].scheduler.estimatedAvgPaketSize = 300b
*.misc[*].app[0].scheduler.maxApplicationBandwidth = 50kbps
*.misc[*].app[0].scheduler.numberPackets  = 1


## Density Map ##
*.misc[*].app[1].typename = "DensityMapApp"
*.misc[*].app[1].app.typename = "DensityMapAppSimple"
*.misc[*].app[1].app.startTime = 0s
*.misc[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder", \
	appendRessourceSharingDomoinId: true}
### Density Map scheduling ###
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.misc[*].app[1].scheduler.generationInterval = 2s
*.misc[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[*].app[1].scheduler.maxApplicationBandwidth = 150kbps
*.misc[*].app[1].scheduler.numberPackets  = -1
#*.misc[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.misc[*].app[1].scheduler.amountOfData  = -1B # based on fair share of application bandwidth
*.misc[*].app[1].app.maxPduLength = 1400B

## Neighborhood Table ##
*.misc[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.misc[*].nTable.maxAge = 5s	# TTL

## Entropy Map ##
*.misc[*].app[2].typename = "DensityMapApp"
*.misc[*].app[2].socket.destPort = 30003
*.misc[*].app[2].socket.localPort = 0003
*.misc[*].app[2].app.typename = "EntropyMapAppSimple"
*.misc[*].app[2].app.startTime = 0s
*.misc[*].app[2].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 1.0, \
	stepDist: 999.0, \
	idStreamType: "insertionOrder", \
	appendRessourceSharingDomoinId: true}
###  Entropy Map scheduling ### log: ymfPlusDistStep
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.misc[*].app[2].scheduler.generationInterval = 2s
*.misc[*].app[2].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[*].app[2].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[*].app[2].scheduler.maxApplicationBandwidth = 1Mbps
*.misc[*].app[2].scheduler.numberPackets  = -1
*.misc[*].app[2].scheduler.amountOfData  = 200MB # complet map
*.misc[*].app[2].app.maxPduLength = 1400B

## Neighborhood Client Table ##
*.misc[*].nTableClient.typename = "EntropyNeigborhoodTableClient"
*.misc[*].nTableClient.globalTable = "globalMeasurementMap"
*.misc[*].nTableClient.distance =  25.0 # only use current cell
*.misc[*].app[2].app.neighborhoodTableModule = ".nTableClient"
#*.misc[*].nTableClient.maxAge = 5s	# TTL

[Config miscNodeCfg]
extends = _misc_static, _misc_app

[Config networkSettings]
extends = Defaults_4G, D2D_General, enb_5x3

[Config cmd_debug]
cmdenv-express-mode = false
cmdenv-log-prefix = ""
#*.pNode[0].app[*].**.cmdenv-log-level = debug
*.globalDensityMap.cmdenv-log-level = debug
*.globalMeasurementMap.cmdenv-log-level = debug
**.cmdenv-log-level = off

[Config with_vis]

*.visualization.sceneVisualizer.typename = "SumoSceneCanvasVisualizer"
*.visualization.sceneVisualizer.mapFile = xmldocGz("sumo/munich/muc_cleaned/muc.net.xml.gz")
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1
*.*visualization.physicalEnvironmentVisualizer.typename = "PhysicalEnvironmentCanvasVisualizer"



[Config topo_muc_5kx3k]
#extends = noTraCI, stat_misc, pedestrian_beacon_map_udp, misc_beacon_map_udp
*.coordConverter.typename = "OsgCoordConverterSumo"
*.coordConverter.netFile = xmldocGz("sumo/munich/muc_cleaned/muc.net.xml.gz")
*.mapVisualizer.typename = "" # area to big

#*.bonnMotionServer.traceFile = "sumo/munich/muc_cleaned/output/cleaned_network/bonnmotion_2/000___muc.bonnmotion.gz"
*.bonnMotionServer.traceFile = "traces/004___muc_1k.bonnmotion.gz"

#[Config muc_5kx3k_static_sumo]
#extends = withSumoPeds,  misc_apps
##extends = withSumoPeds, stat_misc, pedestrian_beacon_map_udp, misc_beacon_map_udp
#*.coordConverter.typename = "OsgCoordConverterSumo"
#*.coordConverter.netFile = xmldocGz("sumo/munich/muc_cleaned/muc.net.xml.gz")
#*.mapVisualizer.typename = "" # area to big
#
#*.traci.launcher.sumoCfgBase = "sumo/munich/munich.sumo.cfg"
#

#enb_muc_2 enb_7x6
[Config final_multi_enb]
extends = topo_muc_5kx3k, networkSettings, noTraCI, globalMapSetup, pNodeCfg, miscNodeCfg

*.misc[*].cellularNic.channelModel[*].*Sinr*.vector-recording = true
*.misc[*].cellularNic.channelModel[*].**.vector-recording  = false
*.eNB[*].cellularNic.mac.measuredItbs*.vector-recording = false
*.eNB[*].cellularNic.mac.sentPacketToLowerLayer*.vector-recording = false
*.eNB[*].cellularNic.mac.receivedPacketFromLowerLayer*.vector-recording = false
*.misc[*].cellularNic.phy.averageCqiD2D*.vector-recording = false
# used for autmated study

[Config final_multi_enb_dev]
extends = final_multi_enb
description = "DEV"
sim-time-limit = 30.0s
result-dir = "/mnt/data1tb/results/multi_enb/"


[Config final_multi_enb_30_min]
extends = final_multi_enb
result-dir = "/mnt/data1tb/results/multi_enb/"
sim-time-limit = 1800.0s

#sim-time-limit = 60s

