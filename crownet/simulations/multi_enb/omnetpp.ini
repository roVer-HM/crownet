[General]
network = crownet.simulations.multi_enb.World
image-path=../../images
print-undisposed = true
num-rngs = 2  # seperate random base for entropy map

#============= Simulation parameters ================
sim-time-limit=400s
#warmup-period=60s      # Note: When analyzing the results, you need to apply the same warmup-period to measurement data!

[Config Defaults]

#============= Statistics ===========================
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
experiment-label = ${datetime} # use ${experiment}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out
seed-set = ${repetition}

**.scalar-recording = true
#**.statistic-recording = false
**.routingRecorder.enabled = false

*.server.**.vector-recording = false
*.*NB[*].sctp.**.vector-recording = false
*.*NB[*].**.vector-recording = true
*.*NB[*].cellularNic.mac.**.vector-recording = true
*.*NB[*].cellularNic.phy.**.vector-recording = true
*.*NB[*].pos*.result-recording-modes = +vector
*.*NB[*].pos*.vector-recording=true

*.*Node[*].app[*].**.vector-recording = true
*.*Node[*].app[*].packetMeter*.*.vector-recording = false
*.*Node[*].app[*].app.*DataRate.throughput.interval = 1s
*.*Node[*].nTable.**.vector-recording = true
*.*Node[*].cellularNic.phy.**.vector-recording = true
*.*Node[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.*Node[*].cellularNic.channelModel[*].**.vector-recording = true
*.*Node[*].cellularNic.**.vector-recording = false
*.*Node[*].pos*.result-recording-modes = +vector
*.*Node[*].pos*.vector-recording=true

*.misc[*].app[*].packetMeter*.*.vector-recording = false
*.misc[*].app[*].app.*DataRate.throughput.interval = 1s
*.misc[*].nTable.**.vector-recording = true
*.misc[*].cellularNic.phy.**.vector-recording = true
*.misc[*].cellularNic.channelModel[*].**.result-recording-modes = +vector
*.misc[*].cellularNic.channelModel[*].**.vector-recording = true
*.misc[*].cellularNic.**.vector-recording = false
*.misc[*].pos*.result-recording-modes = +vector
*.misc[*].pos*.vector-recording=true

#**.vector-recording = true

#============= Mobility parameters ==================
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
# PhysicalEnviroment (*.physicalEnvironment.config set by other config)
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m

#============= AMC module parameters ===============
**.ueTxPower = 26 # default 26
**.d2dTxPower = 26 # default 26
**.eNodeBTxPower = 46 # default 46


#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz
**.numComponentCarriers = 1
**.componentCarrier[0].carrierFrequency = 2600MHz

#**.numComponentCarriers = 2
#**.componentCarrier[0].carrierFrequency = 2600MHz
#**.componentCarrier[1].carrierFrequency = 2400MHz
**.numBands = 25	# componentCarrier


#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel[*].shadowing = true
**.channelModel[*].scenario = "URBAN_MICROCELL" #"URBAN_MACROCELL"
**.channelModel[*].nodeb_height = 25
**.channelModel[*].ue_height = 1.5
**.channelModel[*].building_height = 20

**.channelModel[*].street_wide = 20
**.channelModel[*].tolerateMaxDistViolation = true
**.channelModel[*].correlation_distance = 25

**.channelModel[*].antennaGainUe = 0
**.channelModel[*].antennGainEnB = 0


**.channelModel[*].dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel[*].fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel[*].fading = true        # Enable/disable fading
#**.channelModel[*].fading = false        # Enable/disable fading
**.channelModel[*].fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel[*].fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel[*].delay_rms = 363e-9

**.channelModel[*].extCell_interference = true # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel[*].downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel[*].uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel[*].d2d_interference = true      # if true, enables the interference computation for D2D connections

#*.misc[*].cellularNic.numCarriers = 2
#*.misc[*].cellularNic.channelModel[0].componentCarrierIndex = 0
#*.misc[*].cellularNic.channelModel[1].componentCarrierIndex = 1
#
#*.eNB[*].cellularNic.numCarriers=1
#*.eNB[0].cellularNic.channelModel[0].componentCarrierIndex = 0
#*.eNB[1].cellularNic.channelModel[0].componentCarrierIndex = 1

#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 300000B  	            # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)

# global parameters
**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")


[Config Defaults_4G]
extends = Defaults
*.useNR = false
# (person and vehicle aka pNode and vNode)
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nicType = "LteNicUeD2D"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.*Node[*].cellularNic.address = "auto"

# Misc
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nicType = "LteNicUeD2D"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.misc[*].cellularNic.address = "auto"

[Config Defaults_5G]
extends = Defaults
*.useNR = true
# (person and vehicle aka pNode and vNode)
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nrMasterId = 1
*.*Node[*].nicType = "NRNicUe"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.*Node[*].cellularNic.address = "auto"

# Misc
*.misc[*].macCellId = 1
*.misc[*].masterId = 1
*.misc[*].nrMasterId = 1
*.misc[*].nicType = "NRNicUe"
*.misc[*].radioDriver.dispatchInterfaceName = "cellular"
*.misc[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.misc[*].cellularNic.address = "auto"




[Config reducedPowerSettings]

#============= AMC module parameters ===============
**.ueTxPower = 20 #20
**.d2dTxPower = 10
**.eNodeBTxPower = 20  #DBm
**.channelControl.carrierFrequency = 2603e+6Hz
**.componentCarrier[0].carrierFrequency = 2604MHz
**.numBands = 25


[Config World_dcd]

*.hasCellular = true
*.hasStoryboard = false
*.hasWlan = false

*.globalDensityMap.typename = "GlobalDensityMap"
*.flowController.typename = "" 

# avg = (1-alpha)*avg + alpha*new_val (rtpc)
**.packetMeter.alpha = 0.0625

[Config Entropy_Map]

*.globalDensityMap.typename = "GlobalEntropyMap"
*.globalDensityMap.entropyInterval = 1s
#*.globalDensityMap.entropyProvider = crownet::UniformEntropy{ 
#		minValue: 1.0, maxValue: 30.0, 
#		cellSelectionPropability: 0.70 }
*.globalDensityMap.entropyProvider = crownet::RndOffsetPolynomialEntropy{ coefficients : [0.0, 1.0,], cellSelectionPropability : 1.0, minValue: 10.0, maxValue: 30.0}


[Config D2D_General]
extends = World_dcd
# Default D2D config
# World contains nodes in 3 different vectors
# pNode (pedestrians), vNode(vehicles) 
# and misc(stationary nodes not controlled by any mobility provider
# To allow communication between all the need to be in the same 
# multicast group
## Enrolled multicast groups (TraCI) for person and vehicle ##
#  Must be set in the HostAutoConfigurator (instead of ip4Config.xml), seperated by a single space character
# for vNode[*] and pNode[*]
*.*Node[*].ipv4.configurator.interfaces = "cellular" #"wlan"
*.*Node[*].ipv4.configurator.addressBase = "20.0.0.0"
*.*Node[*].ipv4.configurator.netmask = "255.0.0.0"
*.*Node[*].cellularNic.processingDelayIn = 5518us
*.*Node[*].cellularNic.processingDelayOut = 1134us
*.*Node[*].cellularNic.phy.d2dEnforceEnbBoundOnSideLink = true

# todo processingDelayIN/OUT in 5G?
**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data
*.eNB[*].cellularNic.processingDelayIn = 1134us    # additional processing delays
*.eNB[*].cellularNic.processingDelayOut = 1134us

# Misc (only set interface name. Rest is done with ip4Config.xml)
*.misc[*].ipv4.configurator.interfaces = "cellular" 
*.misc[*].cellularNic.processingDelayIn = 5518us
*.misc[*].cellularNic.processingDelayOut = 1134us
*.misc[*].cellularNic.phy.d2dEnforceEnbBoundOnSideLink = true


### Select CQI for D2D transmissions ###
# One-to-Many communications work with fixed CQI values only. Set the parameter **.usePreconfiguredTxParams and
# select the desired CQI using the parameter **.d2dCqi
**.usePreconfiguredTxParams = true
**.d2dCqi = 7


# Setup mobility provider
########################################################################

[Config withSumoBase]
*.traci.core.typename = "Core"
*.traci.core.version = -1
*.traci.core.selfStopping = false
*.traci.launcher.typename = "SumoLauncher"
*.traci.launcher.hostname = "sumo"
*.traci.launcher.port = 9999
*.traci.launcher.seed = 1234
*.traci.mapper.typename = "BasicModuleMapper"
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
*.traci.mapper.vehicleType = "crownet.nodes.ApplicationLayerVehicle"
*.traci.nodes.typename = "SumoCombinedNodeManager"
*.traci.nodes.personSinkModule = ".mobility"
*.traci.nodes.vehicleSinkModule = ".mobility"
*.traci.nodes.personNode = "pNode"
*.traci.nodes.vehicleNode = "vNode"
*.traci.subscriptions.typename = "BasicSubscriptionManager"
# actiavete visualisation. replace with "" empty string to deactivate
*.*Node[*].mobility.visualRepresentation = "^"

*.coordConverter.typename = "OsgCoordConverterSumo"
# UTM ZONE 32N
*.coordConverter.epsg_code = "EPSG:32632"
*.coordConverter.coreModule ="traci.core"
**.useVadere = false

[Config withSumoPeds]
extends = withSumoBase
**.ignoreVehicle = true
**.ignorePersons = false

[Config withSumoVehicles]
extends = withSumoBase
**.ignoreVehicle = false
**.ignorePersons = true

[Config withSumoBoth]
extends = withSumoBase
**.ignoreVehicle = false
**.ignorePersons = false


[Config withVadere]
*.traci.core.typename = "VadereCore"
*.traci.core.version = -1
*.traci.core.selfStopping = false
*.traci.launcher.typename = "VadereLauncher"
*.traci.launcher.hostname = "vadere"
*.traci.launcher.port = 9998
*.traci.mapper.typename = "VadereModuleMapper"
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
*.traci.nodes.typename = "VadereNodeManager"
*.traci.nodes.personSinkModule = ".mobility"
*.traci.nodes.vehicleSinkModule = ".mobility"
*.traci.nodes.personNode = "pNode"
*.traci.subscriptions.typename = "VadereSubscriptionManager"
# actiavete visualisation. replace with "" empty string to deactivate
*.*Node[*].mobility.visualRepresentation = "^"

*.coordConverter.typename = "OsgCoordConverterVadere"
*.coordConverter.coreModule ="traci.core"
**.useVadere = true
*.globalDensityMap.useSignalMapInit = true

[Config noTraCI]
*.traci.typename = ""
*.flowController.typename =  ""
*.hasStoryboard = false
# if globalDensityMap is used do not use signal initialization (requieres traci)
*.globalDensityMap.useSignalMapInit = false


[Config coordConverter_local_l]
# bounds based on munich.net.xml
*.coordConverter.typename = "OsgCoordConverterLocal"
*.coordConverter.srs_code = "+proj=utm +zone=32 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
*.coordConverter.offset_x = -689405.84 m
*.coordConverter.offset_y = -5335147.07 m
*.coordConverter.xBound = 5325.50m
*.coordConverter.yBound = 4232.08m


[Config coordConverter_local_m]
# bounds based on vadere scenarios circle/mf_dynamic_m
*.coordConverter.typename = "OsgCoordConverterLocal"
*.coordConverter.srs_code = "+proj=utm +zone=32 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
*.coordConverter.offset_x = -692152.0894735109m
*.coordConverter.offset_y = -5337384.6661008m
*.coordConverter.xBound = 415.50m
*.coordConverter.yBound = 394.08m

[Config _pnode_bonn_motion]
*.bonnMotionServer.typename = "BonnMotionMobilityServer"
*.bonnMotionServer.moduleType  = "crownet.nodes.ApplicationLayerPedestrian"
*.bonnMotionServer.vectorNode  = "pNode"
*.globalDensityMap.vectorNodeModule = ""
*.globalDensityMap.nodeModules = ""
*.globalDensityMap.traciModuleListener = ""
*.globalDensityMap.useSignalMapInit = false
*.pNode[*].mobility.typename = "BonnMotionMobilityClient"
*.pNode[*].middleware.typename = ""
*.pNode[*].useArtery = false
*.pNode[*].useVadere = false
*.pNode[*].typename =  "crownet.nodes.ApplicationLayerPedestrian"


[Config _misc_bonn_motion]
*.bonnMotionServer.typename = "BonnMotionMobilityServer"
*.bonnMotionServer.moduleType  = "crownet.nodes.ApplicationLayerPedestrian"
*.bonnMotionServer.vectorNode  = "misc"
*.globalDensityMap.vectorNodeModule = ""
*.globalDensityMap.nodeModules = ""
*.globalDensityMap.traciModuleListener = ""
*.globalDensityMap.useSignalMapInit = false
*.misc[*].mobility.typename = "BonnMotionMobilityClient"
*.misc[*].middleware.typename = ""
*.misc[*].useArtery = false
*.misc[*].useVadere = false
*.misc[*].typename =  "crownet.nodes.ApplicationLayerPedestrian"

[Config _misc_stationary]
*.misc[*].middleware.typename = ""
*.misc[*].mobility.typename = "StationaryMobility"
*.misc[*].mobility.coordinateSystemModule = "coordConverter"
*.misc[*].mobility.initFromDisplayString = false
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"


[Config _misc_random_walk_m]
*.misc[*].middleware.typename = ""
*.misc[*].mobility.typename = "RandomWaypointMobility"
*.misc[*].mobility.coordinateSystemModule = "coordConverter"
*.misc[*].mobility.initFromDisplayString = false
# todo: normal distribution truncated to nonnegative values
#		only cutting negatives is not correct here. Cut at e.g. +-6-sigma
*.misc[*].mobility.speed = truncnormal(1.34mps, 0.26mps)
*.misc[*].mobility.waitTime = 0s
*.misc[*].mobility.constraintAreaMinX = 0m
*.misc[*].mobility.constraintAreaMinY = 0m
*.misc[*].mobility.constraintAreaMinZ = 0m
*.misc[*].mobility.constraintAreaMaxX = 415.50m
*.misc[*].mobility.constraintAreaMaxY = 394.08m
*.misc[*].mobility.constraintAreaMaxZ = 10m
*.misc[*].typename = "crownet.nodes.ApplicationLayerPedestrian"


#
# Default settings used by many simulations. Be carful when changing 
# values here because it my break other simulations. 
# 

# Usefull network level default settings.
########################################################################
[Config no_apps]
*.pNode[*].numApps = 0
*.vNode[*].numApps = 0
*.misc[*].numApps = 0


[Config pedestrian_beacon_map_udp]
**.cellSize = 5.0m
## All apps ##
*.pNode[*].numApps = 2
*.pNode[*].app[*].socket.typename = "UdpSocketManager"
*.pNode[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.pNode[*].app[*].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.pNode[*].app[*].scheduler.checkNetworkConnectivity = true

## Beacon ##
*.pNode[*].app[0].typename = "BeaconApp"
*.pNode[*].app[0].app.typename = "BeaconDynamic"
*.pNode[*].app[0].app.appendResourceSharingDomainId = true
*.pNode[*].app[0].app.startTime = uniform(0s,1000ms)
### Beacon scheduling ###
#generationInterval --> lower bound
*.pNode[*].app[0].scheduler.generationInterval = 500ms
*.pNode[*].app[0].scheduler.estimatedAvgPaketSize = 300b
*.pNode[*].app[0].scheduler.maxApplicationBandwidth = 50kbps
*.pNode[*].app[0].scheduler.numberPackets  = 1

## Density Map ##
*.pNode[*].app[1].typename = "DensityMapApp"
*.pNode[*].app[1].app.typename = "DensityMapAppSimple"
*.pNode[*].app[1].app.appendResourceSharingDomainId = true
*.pNode[*].app[1].app.startTime = 0s
*.pNode[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder"}
### Density Map scheduling ###
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.pNode[*].app[1].scheduler.generationInterval = 2s
*.pNode[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[1].scheduler.maxApplicationBandwidth = 500kbps
*.pNode[*].app[1].scheduler.numberPackets  = -1
#*.pNode[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.pNode[*].app[1].scheduler.amountOfData  = -1B # based on fair share of application bandwidth
*.pNode[*].app[1].app.maxPduLength = 1400B

## Log ##
*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}
*.globalDensityMap.writeMapInterval = 1000ms

## Neighborhood Table ##
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 5s	# TTL

[Config pedstrian_entropy_map_udp]
**.cellSize = 5.0m
## All apps ##
*.pNode[*].numApps = 1
*.pNode[*].app[*].socket.typename = "UdpSocketManager"
*.pNode[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.pNode[*].app[*].scheduler.neighborhoodSizeProvider = "" # do not use NT here
*.pNode[*].app[*].scheduler.checkNetworkConnectivity = true

## Density Map ##
*.pNode[*].app[0].typename = "DensityMapApp"
*.pNode[*].app[0].app.typename = "EntropyMapAppSimple"
*.pNode[*].app[0].app.appendResourceSharingDomainId = true
*.pNode[*].app[0].app.startTime = 0s
*.pNode[*].app[0].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder"}
### Density Map scheduling ###
# Schedule multiple packets in each interval
*.pNode[*].app[0].scheduler.typename = "DynamicMaxBandwidthScheduler"
#generationInterval --> lower bound
*.pNode[*].app[0].scheduler.generationInterval = 2s
*.pNode[*].app[0].scheduler.startOffset = uniform(0s, 4000ms)
*.pNode[*].app[0].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.pNode[*].app[0].scheduler.maxApplicationBandwidth = 500kbps
*.pNode[*].app[0].scheduler.numberPackets  = -1
*.pNode[*].app[0].scheduler.amountOfData  = 200MB
*.pNode[*].app[0].app.maxPduLength = 1400B

## Log ##
*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}
*.globalDensityMap.writeMapInterval = 1000ms

## Neighborhood Table ##
*.pNode[*].nTable.typename = "EntropyNeigborhoodTableClient"
#*.pNode[*].nTable.maxAge = 5s	# TTL
*.pNode[*].nTable.globalTable = "globalDensityMap"
*.pNode[*].nTable.distance = -1.0 # only use current cell

###############################################################################
###############################################################################
###############################################################################

[Config misc_beacon_map_udp]
**.cellSize = 5.0m
## All apps ##
*.misc[*].numApps = 2
*.misc[*].app[*].socket.typename = "UdpSocketManager"
*.misc[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.misc[*].app[*].scheduler.neighborhoodSizeProvider = "^.^.app[1].app"
*.misc[*].app[*].scheduler.checkNetworkConnectivity = true

## Beacon ##
*.misc[*].app[0].typename = "BeaconApp"
*.misc[*].app[0].app.typename = "BeaconDynamic"
*.misc[*].app[0].app.appendResourceSharingDomainId = true
*.misc[*].app[0].app.startTime = uniform(0s,10ms)
*.misc[*].app[0].app.packetLength = 1000B
### Beacon scheduling ###
#generationInterval --> lower bound
*.misc[*].app[0].scheduler.generationInterval = 500ms
*.misc[*].app[0].scheduler.estimatedAvgPaketSize = 300b
*.misc[*].app[0].scheduler.maxApplicationBandwidth = 50kbps
*.misc[*].app[0].scheduler.numberPackets  = 1


## Density Map ##
*.misc[*].app[1].typename = "DensityMapApp"
*.misc[*].app[1].app.typename = "DensityMapAppSimple"
*.misc[*].app[1].app.appendResourceSharingDomainId = true
*.misc[*].app[1].app.startTime = 0s
*.misc[*].app[1].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 0.9, \
	stepDist: 60.0, \
	idStreamType: "insertionOrder"}
### Density Map scheduling ###
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.misc[*].app[1].scheduler.generationInterval = 2s
*.misc[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[*].app[1].scheduler.maxApplicationBandwidth = 150kbps
*.misc[*].app[1].scheduler.numberPackets  = -1
#*.misc[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.misc[*].app[1].scheduler.amountOfData  = -1B # based on fair share of application bandwidth
*.misc[*].app[1].app.maxPduLength = 1400B


## Log ##
#*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.typename = ""
#*.fileWriterRegister.register = { \
#	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
#	}
*.globalDensityMap.writeMapInterval = 1000ms

## Neighborhood Table ##
*.misc[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.misc[*].nTable.maxAge = 5s	# TTL

[Config misc_entropy_map_udp]
**.cellSize = 5.0m
## All apps ##
*.misc[*].numApps = 1
*.misc[*].app[*].socket.typename = "UdpSocketManager"
*.misc[*].app[*].scheduler.typename = "DynamicMaxBandwidthScheduler"
*.misc[*].app[*].scheduler.neighborhoodSizeProvider = "" # do not use NT here
*.misc[*].app[*].scheduler.checkNetworkConnectivity = true

## Density Map ##
*.misc[*].app[0].typename = "DensityMapApp"
*.misc[*].app[0].app.typename = "EntropyMapAppSimple"
*.misc[*].app[0].app.appendResourceSharingDomainId = true
*.misc[*].app[0].app.startTime = 0s
*.misc[*].app[0].app.mapCfg = crownet::MapCfgYmfPlusDistStep{ \
	writeDensityLog: true, \
	mapTypeLog: "ymfPlusDistStep", \
	cellAgeTTL: 15.0s, \
	alpha: 1.0, \
	stepDist: 999.0, \
	idStreamType: "insertionOrder"}
### Density Map scheduling ### log: ymfPlusDistStep
# Schedule multiple packets in each interval
#generationInterval --> lower bound
*.misc[*].app[1].scheduler.generationInterval = 2s
*.misc[*].app[1].scheduler.startOffset = uniform(0s, 4000ms)
*.misc[*].app[1].scheduler.estimatedAvgPaketSize = 1400B # asume full packet
*.misc[*].app[1].scheduler.maxApplicationBandwidth = 1Mbps
*.misc[*].app[1].scheduler.numberPackets  = -1
*.misc[*].app[1].scheduler.amountOfData  = 200MB # complet map
*.misc[*].app[1].app.maxPduLength = 1400B


## Log ##
*.fileWriterRegister.typename = "FileWriterRegister"
*.fileWriterRegister.register = { \
	neighborhoodWriter: crownet::NeighborhoodEventWriter{filePath: "beacons.csv"} \
	}
*.globalDensityMap.writeMapInterval = 1000ms

## Neighborhood Table ##
*.misc[*].nTable.typename = "EntropyNeigborhoodTableClient"
*.misc[*].nTable.globalTable = "globalDensityMap"
*.misc[*].nTable.distance =  -1.0 # only use current cell


### includes
include ./eNB_settings.ini
include ./enb_muc_clean5x3.ini
include ./misc_muc_clean5x3.ini

[Config cmd_debug]
cmdenv-express-mode = false
cmdenv-log-prefix = ""
*.pNode[0].app[*].**.cmdenv-log-level = debug
**.cmdenv-log-level = off

[Config with_vis]

*.visualization.sceneVisualizer.typename = "SumoSceneCanvasVisualizer"
*.visualization.sceneVisualizer.mapFile = xmldocGz("sumo/munich/muc_cleaned/muc.net.xml.gz")
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1
*.*visualization.physicalEnvironmentVisualizer.typename = "PhysicalEnvironmentCanvasVisualizer"



[Config muc_5kx3k_static_bonnmotion]
extends = noTraCI, _pnode_bonn_motion,  misc_beacon_map_udp, pedestrian_beacon_map_udp
#extends = noTraCI, _pnode_bonn_motion, stat_misc, pedestrian_beacon_map_udp, misc_beacon_map_udp
*.coordConverter.typename = "OsgCoordConverterSumo"
*.coordConverter.netFile = xmldocGz("sumo/munich/muc_cleaned/muc.net.xml.gz")
*.mapVisualizer.typename = "" # area to big

#*.bonnMotionServer.traceFile = "sumo/munich/muc_cleaned/output/cleaned_network/bonnmotion_2/000___muc.bonnmotion.gz"
*.bonnMotionServer.traceFile = "traces/004___muc_1k.bonnmotion.gz"

[Config muc_5kx3k_static_sumo]
extends = withSumoPeds,  misc_beacon_map_udp
#extends = withSumoPeds, stat_misc, pedestrian_beacon_map_udp, misc_beacon_map_udp
*.coordConverter.typename = "OsgCoordConverterSumo"
*.coordConverter.netFile = xmldocGz("sumo/munich/muc_cleaned/muc.net.xml.gz")
*.mapVisualizer.typename = "" # area to big

*.traci.launcher.sumoCfgBase = "sumo/munich/munich.sumo.cfg"


#enb_muc_2 enb_7x6
[Config final_muli_enb]
extends = muc_5kx3k_static_bonnmotion, Defaults_4G, D2D_General, enb_5x3
#extends = muc_5kx3k_static_sumo, with_vis, cmd_debug, Defaults_4G, D2D_General, enb_5x3,
#extends = Defaults_4G, D2D_General, enb_muc_2, muc_5kx5k_static_sumo, no_apps
#extends = Defaults_4G, D2D_General, enb_muc_2, muc_5kx5k_bonnmotion, misc_beacon_map_udp
#extends = Defaults_4G, D2D_General, enb_muc_2, muc_5kx5k_bonnmotion, no_apps
#sim-time-limit = 200.0s
*.misc[*].cellularNic.channelModel[*].*Sinr*.vector-recording = true
*.misc[*].cellularNic.channelModel[*].**.vector-recording  = false
*.eNB[*].cellularNic.mac.measuredItbs*.vector-recording = false
*.eNB[*].cellularNic.mac.sentPacketToLowerLayer*.vector-recording = false
*.eNB[*].cellularNic.mac.receivedPacketFromLowerLayer*.vector-recording = false
*.misc[*].cellularNic.phy.averageCqiD2D*.vector-recording = false
*.fileWriterRegister.typename = ""
# used for autmated study

[Config final_muli_enb_dev]
extends = final_muli_enb
description = "DEV"
sim-time-limit = 60s


###############################################################################
#################################ENTROPY#######################################
###############################################################################


[Config final_bonn_motion_entropy]
extends = Entropy_Map, enb_muc_2, muc_5kx3k_static_sumo, misc_entropy_map_udp, D2D_General, Defaults_4G
sim-time-limit = 50.0s
#*.misc[*].cellularNic.channelModel[*].rcvdSinr*.vector-recording = true
#*.misc[*].cellularNic.channelModel[*].**.vector-recording = false
*.misc[*].cellularNic.channelModel[*].**.vector-recording = true
*.eNB[*].cellularNic.mac.measuredItbs*.vector-recording = false
*.eNB[*].cellularNic.mac.sentPacketToLowerLayer*.vector-recording = false
*.eNB[*].cellularNic.mac.receivedPacketFromLowerLayer*.vector-recording = false
*.misc[*].cellularNic.phy.averageCqiD2D*.vector-recording = false
*.fileWriterRegister.typename = ""
*.coordConverter.areaOfInterest = crownet::AreaOfInterest{x: 0.0, y: 140.0, width: 415.0, height: 100.0}


[Config final_bonn_motion_entropy_dev]
extends = final_bonn_motion_entropy
description = "DEV"
#*.bonnMotionServer.traceFile = "trace/mf_1d_m_const_short_2x5m_d20m_2023-01-17_08-58-32.896_trace_4.bonnMotion"
#*.traci.launcher.sumoCfgBase = "sumo/munich/munich.sumo.cfg"


