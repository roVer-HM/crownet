# OpenAirInterface experimental 5G testbed setup: simulation scenarios
#
# based on the configuration within the bachelor thesis of Matthias Landes:
# Matthias Landes, "Experimentelle Validierung einer Open-Source 5G SA Simulation im kleinen Massstab", 
# bachelor thesis, HM Munich University of Applied Sciences, Feb. 2024
# 
# (M. Landes adapted the omnetpp.ini for LTE-A in the same folder to 5G NR)

[General]
network = crownet.simulations.networks.LabSingleCellNR
image-path=../../images

### includes
include ./defaults.ini

### NR specific general parameters:
## connect each UE to the eNB
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1


################################################  Downlink Scenarios ####################################################

## base configurations with unadapted parameters

[Config regularModelNR]
**.numBands = 50

[Config adaptedModelNR]
**.numBands = 50
**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data

**.gNB[*].cellularNic.processingDelayIn = 1000us    # additional processing delays 
**.gNB[*].cellularNic.processingDelayOut = 1000us

**.ue[*].cellularNic.processingDelayIn = 1000us
**.ue[*].cellularNic.processingDelayOut = 1000us


[Config adaptedULModelNR]
**.gNB[*].cellularNic.processingDelayIn = 1000us
**.gNB[*].cellularNic.processingDelayOut = 1000us

**.ue[*].cellularNic.processingDelayIn = 1000us
**.ue[*].cellularNic.processingDelayOut = 1000us

##################################################
# S1-base: low-rate data traffic - base scenario #
##################################################
[Config S1-base-NR]
extends=Defaults
*.numUe = ${numUEs=1}

*.ue[*].numApps = 1
*.ue[*].app[0].typename = "AlertReceiver"

*.server.numApps = ${numUEs} # applications on server should be equal to (numUEs)*(ue[*].numUdpApps)
*.server.app[*].destAddress = "ue["+string(ancestorIndex(0))+"]" # obtain the address of the client by reading its index in the array of apps
*.server.app[*].localPort = 3088+ancestorIndex(0)
*.server.app[*].typename = "AlertSender"
*.server.app[*].multicastInterface = ""  # server runs on a standard host - no need to set mulicastInterface manually
*.server.app[*].packetSize =300B
*.server.app[*].period = truncnormal(0.1s, 1ms)
*.server.app[*].startTime = uniform(0s,0.02s)
*.server.app[*].stopTime = 300.0s

[Config S1-base-App-NR]
extends=Defaults
*.numUe = ${numUEs=1}

*.ue[*].numApps = 1
*.ue[*].app[0].typename = "AlertReceiver"

*.server.numApps = ${numUEs} # applications on server should be equal to (numUEs)*(ue[*].numUdpApps)
*.server.app[*].destAddress = "ue["+string(ancestorIndex(0))+"]" # obtain the address of the client by reading its index in the array of apps
*.server.app[*].localPort = 3088+ancestorIndex(0)
*.server.app[*].typename = "AlertSender"
*.server.app[*].multicastInterface = ""  # server runs on a standard host - no need to set mulicastInterface manually
*.server.app[*].packetSize = 62500B
*.server.app[*].period = truncnormal(0.025s, 1ms)
*.server.app[*].startTime = uniform(0s,0.02s)
*.server.app[*].stopTime = 300.0s

##################################################
# S1: low-rate data traffic (50 RBs)             #
##################################################
[Config S1-NR]
extends=S1-base-NR, adaptedModelNR

##################################################
# S1.UA: low-rate data traffic, unadapted model  #
##################################################
[Config S1-UA-NR]
extends=S1-base-NR, regularModelNR

[Config S1-UA-APP-NR]
extends=S1-base-App-NR, regularModelNR

[Config S1-APP-NR]
extends=S1-base-App-NR, adaptedModelNR

##################################################
# S1.25: low-rate data traffic, only 25 RBs      #
##################################################
[Config S1-UP-base-NR]
extends=Defaults
*.numUe = ${numUEs=1}

*.ue[*].numApps = 1
*.ue[*].app[0].destAddress = "server"
*.ue[*].app[0].localPort = 3088+ancestorIndex(0)
*.ue[*].app[0].typename = "AlertSender"
*.ue[*].app[0].multicastInterface = ""
*.ue[*].app[0].packetSize = 300B
*.ue[*].app[0].period = truncnormal(0.1s, 1ms)
*.ue[*].app[0].startTime = uniform(0s, 0.02s)
*.ue[*].app[0].stopTime = 300.00s

*.gNB.cellularNic.phy.dynamicCellAssociation = true

*.server.numApps = ${numUEs} # applications on server should be equal to (numUEs)*(ue[*].numUdpApps)
*.server.app[*].typename = "AlertReceiver"
*.server.app[*].multicastInterface = ""  # server runs on a standard host - no need to set mulicastInterface manually

[Config S1-UP-base-App-NR]
extends=Defaults
*.numUe = ${numUEs=1}

*.server.numApps = 1
*.server.app[0].typename = "AlertReceiver"
*.server.app[0].multicastInterface = ""

*.ue[*].numApps = ${numUEs} # applications on server should be equal to (numUEs)*(ue[*].numUdpApps)
*.ue[*].app[*].destAddress = "server" # obtain the address of the client by reading its index in the array of apps
*.ue[*].app[*].localPort = 3088+ancestorIndex(0)
*.ue[*].app[*].typename = "AlertSender"
*.ue[*].app[*].multicastInterface = ""  # server runs on a standard host - no need to set mulicastInterface manually
*.ue[*].app[*].packetSize = 31250B
*.ue[*].app[*].period = 0.008s
*.ue[*].app[*].startTime = uniform(0s,0.02s)
*.ue[*].app[*].stopTime = 300.0s

[Config S1-UP-NR]
extends=S1-UP-base-NR, adaptedULModelNR

[Config S1-UP-UA-NR]
extends=S1-UP-base-NR, regularModelNR

[Config S1-UP-App-NR]
extends= S1-UP-base-App-NR, adaptedULModelNR


##################################################
# S1.25: low-rate data traffic, only 25 RBs UA   #
##################################################

[Config S1-alert-variance-NR]
extends=S1-NR

*.server.app[*].period =  truncnormal(0.1s, ${perstddev=0..100 step 1}ms)
output-scalar-file = ${resultdir}/${configname}/perstddev_${perstddev}_${repetition}.sca
output-vector-file = ${resultdir}/${configname}/perstddev_${perstddev}_${repetition}.vec

######################################################
# S2-base: SingleCell Lab Configuration - Overload   #
######################################################
[Config S2-base-NR]
extends=Defaults
*.numUe = ${numUEs=1}
*.ue[*].numApps = 1

*.ue[*].app[0].typename = "AlertReceiver"
*.ue[*].app[1].typename = "UdpSink"
*.ue[*].app[1].localPort = 5000

*.server.numApps = ${numUEs} + 1 # one sender application for each UE + background traffic
# CAMs
*.server.app[0].destAddress = "ue[0]"
*.server.app[0].localPort = 3088
*.server.app[0].typename = "AlertSender"
*.server.app[0].multicastInterface = ""  # server runs on a standard host - no need to set mulicastInterface manually
*.server.app[0].packetSize = 300B
*.server.app[0].period = truncnormal(0.1s, 1ms)
*.server.app[0].startTime = uniform(0s,0.02s)
*.server.app[0].stopTime = 300.0s

# background traffic
*.server.app[1..].typename = "UdpBasicApp"
*.server.app[1..].destAddresses = "ue[0]"
*.server.app[1..].sendInterval = truncnormal(60us, 1us) # 60us corresponds to 8.14 MiB/s background traffic
*.server.app[1..].destPort = 5000
*.server.app[1..].messageLength = 1024B
*.server.app[1..].packetName = "UDPBackground"



[Config S2-NR]
extends=S2-base-NR, adaptedModelNR

[Config S2-UA-NR]
extends=S2-base-NR, regularModelNR

[Config S2-UP-base-NR]
extends=Defaults
*.numUe = ${numUEs=1}

*.ue[*].numApps = ${numUEs} + 1 
# background traffic
*.ue[*].app[0].typename = "UdpBasicApp"
*.ue[*].app[0].destAddresses = "server"
*.ue[*].app[0].sendInterval = truncnormal(60us, 1us) # 60us corresponds to 8.14 MiB/s background traffic
*.ue[*].app[0].destPort = 5000
*.ue[*].app[0].messageLength = 256B
*.ue[*].app[0].packetName = "UDPBackground"

*.ue[*].app[1..].destAddress = "server"
*.ue[*].app[1..].localPort = 3088+ancestorIndex(0)
*.ue[*].app[1..].typename = "AlertSender"
*.ue[*].app[1..].multicastInterface = ""
*.ue[*].app[1..].packetSize = 300B
*.ue[*].app[1..].period = truncnormal(0.1s, 1ms)
*.ue[*].app[1..].startTime = uniform(0s, 0.02s)
*.ue[*].app[1..].stopTime = 300.00s

*.gNB.cellularNic.phy.dynamicCellAssociation = true

*.server.numApps = ${numUEs} # applications on server should be equal to (numUEs)*(ue[*].numUdpApps)
*.server.app[0].typename = "AlertReceiver"
*.server.app[1].typename = "UdpSink"
*.server.app[1].localPort = 5000
*.server.app[*].multicastInterface = ""  # server runs on a standard host - no need to set mulicastInterface manually


[Config S2-UP-NR]
extends=S2-UP-base-NR, adaptedULModelNR

[Config S2-UP-UA-NR]
extends=S2-UP-base-NR, regularModelNR

