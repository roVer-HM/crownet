################################################################################################################
## Comparing the Influence of Microscopic Pedestrian Mobility Models on Pedestrian Communication
## -- Simulation Configurations --
################################################################################################################
## We model different situations for pedestrian communication via 4G/5G.
## For each situation, two configurations exist:
## 1) sumo* configurations model the pedestrian mobility based on the cellular automaton stripes model in sumo
## 2) vadere* configurations model the pedestrian mobility based on the optimal steps model in vadere
##
## Parameters and constraints for pedestrian mobility are set to identical values for all models as far 
## as possible (based on [weidmann-1992, p. 18] and [seitz-2016c, p. 2]):
## 
## minimum speed: 0.5 m/s
## maximum speed: 2.2 m/s
## speed distribution: truncated normal distribution with mean 1.34 m/s, stddev 0.26 
## 
##
## References:
## [weidmann-1992] U. Weidmann, Transporttechnik der Fussgaenger, Institut fuer Verkehrsplanung, Transporttechnik,
##                 Strassen- und Eisenbahnbau (IVT) ETH, 1993.
## [seitz-2016c]   M. J. Seitz, N. W. F. Bode, G. Koester, How Cognitive Heuristics Can Explain Social Interactions
##                 in Spacial Movement, Journal of the Royal Society Interface, 2016.



[General]
network = crownet.simulations.networks.World
image-path=../../images
print-undisposed = true

#============= Simulation parameters ================
sim-time-limit= 1000s #1000s
# warmup-period=60s      # Note: When analyzing the results, you need to apply the same warmup-period to measurement data!
# repeat = 60 # 3 // 1


#============= Statistics ===========================
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
experiment-label = ${datetime} # use ${experiment}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out

# seed-set = ${repetition}

*.*Node[*].app[*].**.vector-recording = true
*.*Node[*].nTable.**.vector-recording = true
*.*Node[*].tcp.**.vector-recording = true
*.*Node[*].cellularNic.nrChannelModel*.**.vector-recording = true
*.*Node[*].cellularNic.channelModel*.**.vector-recording = true
*.*Node[*].pos*.result-recording-modes = +vector
*.*Node[*].pos*.vector-recording=true

*.misc[*].app[*].**.vector-recording = true
*.misc[*].nTable.**.vector-recording = true
*.misc[*].tcp.**.vector-recording = true
*.misc[*].cellularNic.nrChannelModel*.**.vector-recording = true
*.misc[*].cellularNic.channelModel*.**.vector-recording = true
# *.misc[*].cellularNic.**.vector-recording = true
*.misc[*].pos*.result-recording-modes = +vector
*.misc[*].pos*.vector-recording=true

**.vector-recording = false   # disable all others (to save disc space)
**.scalar-recording = true


#============= AMC module parameters ===============
**.ueTxPower = 20dBm
**.eNodeBTxPower = 20dBm
# **.numBands = 25     # 5 MHz
**.numBands = 6        # 1.4 MHz

# beacon app relies on D2D - configure AMC accordingly
*.*Node[*].cellularNic.mac.amcMode = "D2D"


#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz


#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel[0].shadowing = true
**.channelModel[0].scenario = "URBAN_MICROCELL"
**.channelModel[0].nodeb_height = 25m
**.channelModel[0].ue_height = 1.5m
**.channelModel[0].building_height = 20m

**.channelModel[0].street_wide = 20m
**.channelModel[0].antennaGainUe = 0dBi
**.channelModel[0].antennGainEnB = 0dBi

**.channelModel[0].correlation_distance = 25m
**.channelModel[0].dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel[0].fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel[0].fading = false        # Enable/disable fading
**.channelModel[0].fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel[0].fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel[0].delay_rms = 363e-9s

**.channelModel[0].extCell_interference = false # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel[0].downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel[0].uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel[0].d2d_interference = true      # if true, enables the interference computation for D2D connections

**.usePreconfiguredTxParams = true				# for one-to-many D2D, we must use pre-configured transmission parameters
**.d2dCqi = 7

**.rlc.um.mapAllLcidsToSingleBearer = true      # use a single bearer for all data

# additional processing delays - based on measurements published in 
# https://doi.org/10.1109/pimrc48278.2020.9217163
*.eNB[*].cellularNic.processingDelayIn = 1134us 
*.eNB[*].cellularNic.processingDelayOut = 1134us
*.gNB[*].cellularNic.processingDelayIn = 1134us 
*.gNB[*].cellularNic.processingDelayOut = 1134us
*.*Node[*].cellularNic.processingDelayIn = 5518us
*.*Node[*].cellularNic.processingDelayOut = 1134us
*.misc[*].cellularNic.processingDelayIn = 5518us
*.misc[*].cellularNic.processingDelayOut = 1134us


#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 5000000B              # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)

## IPv4 configuration
*.configurator.config = xmldoc("./network_addr.xml")

################ Node Settings #####################
## see World.ned

*.hasStoryboard = false
*.hasGlobalMap = true
*.hasWlan = false

################ Node Settings #####################
**.identiyRegistryModule = "identiyRegistry"

*.*Node[*].typename = "crownet.nodes.ApplicationLayerPedestrian"
*.*Node[*].radioDriver.dispatchInterfaceName = "cellular"
*.*Node[*].cellularNic.address = "auto"
*.*Node[*].useArtery = false
*.*Node[*].numApps = 1

[Config FourGCellularBase]
*.*Node[*].macCellId = 1
*.*Node[*].masterId = 1
*.*Node[*].nicType = "LteNicUeD2D"
**.useNR = false

# eNB
*.numEnb = 1
*.eNB[0].mobility.initFromDisplayString = false
*.eNB[0].mobility.initialX = 300m
*.eNB[0].mobility.initialY = 300m
*.eNB[0].nicType = "LteNicEnbD2D"
*.eNB[0].cellularNic.mac.amcMode = "D2D"

[Config FiveGCellularBase]
*.*Node[*].nrMacCellId = 1
*.*Node[*].nrMasterId = 1
*.*Node[*].nicType = "NRNicUe"
**.useNR = true

# gNB
*.numGnb = 1
*.gNB[0].mobility.initFromDisplayString = false
*.gNB[0].mobility.initialX = 300m
*.gNB[0].mobility.initialY = 300m
*.gNB[0].nicType = "NRNicEnb"
*.gNB[0].cellularNic.mac.amcMode = "D2D"

[Config BeaconAppBase]
description = Base configuration configuring the beacon app.
# Beacon
*.*Node[*].app[0].typename = "BeaconApp"
*.*Node[*].app[0].app.typename = "BeaconDynamic"
*.*Node[*].app[0].app.startTime =  uniform(0s,0.02s)
*.*Node[*].app[0].app.packetName = "Beacon"
*.*Node[*].app[0].app.packetLength = 300B
*.*Node[*].app[0].socket.destPort = 30001
*.*Node[*].app[0].socket.localPort = 30001
*.*Node[*].app[0].scheduler.typename = "IntervalScheduler"
*.*Node[*].app[0].scheduler.generationInterval = 0.1s  # ${beaconInterval=0.1..1 step 0.1}s

# Neighborhood table
*.*Node[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.*Node[*].nTable.maxAge = 7s

# Artery middleware settings
*.*Node[*].middleware.updateInterval = 0.1s # application trigger
*.*Node[*].middleware.datetime = "2022-05-22 12:35:00"
*.*Node[*].middleware.services = xml("<services/>")
*.*Node[*].middleware.DenService.useCases = xml("<usecases/>")


[Config TcpAppBase]
description = Base configuration: Server has TCP connection to UE.
# tcp apps: model for HTTP traffic
*.*Node[*].numApps = 1
*.*Node[*].app[*].typename = "TcpBasicClientApp"
*.*Node[*].app[0].localAddress = ""
*.*Node[*].app[0].localPort = -1
*.*Node[*].app[0].connectAddress = "server"
*.*Node[*].app[0].connectPort = 80

*.*Node[*].app[0].startTime = exponential(5s)
*.*Node[*].app[0].numRequestsPerSession = 10
*.*Node[*].app[0].requestLength = intWithUnit(truncnormal(350B,20B))
*.*Node[*].app[0].replyLength = intWithUnit(exponential(10kB))
*.*Node[*].app[0].thinkTime = truncnormal(2s,3s)
*.*Node[*].app[0].idleInterval = truncnormal(60s,10s)
*.*Node[*].app[0].reconnectInterval = 10s

**.server*.numApps = 1
**.server*.app[*].typename = "TcpGenericServerApp"
**.server*.app[0].localAddress = ""
**.server*.app[0].localPort = 80
**.server*.app[0].replyDelay = 0s

# tcp settings
**.app[*].dataTransferMode = "object"



################################################################################################################
## mobility model: sumo traffic simulation with pedestrians
################################################################################################################
[Config sumoBase]
description = Base configuration configuring sumo as a mobility provider.

# Coordinate converter:
# Use the OsgCoordConverterLocal instead of the OsgCoordRemote
*.coordConverter.typename = "OsgCoordConverterSumo"
**.coordConverterModule = "coordConverter"

# PhysicalEnviroment (*.physicalEnvironment.config set by other config)
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m
*.physicalEnvironment.config = xml("<environment/>")
*.visualization.sceneVisualizer.typename = "SumoSceneCanvasVisualizer"
*.visualization.sceneVisualizer.coordinateSystemModule = "coordConverter"
*.visualization.sceneVisualizer.zIndex = -1

# TRACI parameters
**.ignoreVehicle = false
**.ignorePersons = false

*.traci.core.typename = "Core"
*.traci.core.version = -1
*.traci.core.selfStopping = false
*.traci.launcher.typename = "SumoLauncher"
*.traci.launcher.hostname = "sumo"
*.traci.launcher.port = 9999
*.traci.launcher.seed = ${repetition}
*.traci.mapper.typename = "BasicModuleMapper"
*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
*.traci.mapper.vehicleType = "crownet.nodes.ApplicationLayerVehicle"
*.traci.nodes.typename = "SumoCombinedNodeManager"
*.traci.nodes.personSinkModule = ".mobility"
*.traci.nodes.vehicleSinkModule = ".mobility"
*.traci.nodes.personNode = "pNode"
*.traci.nodes.vehicleNode = "vNode"

*.traci.subscriptions.typename = "BasicSubscriptionManager"

# Node parameters
# actiavete visualisation. replace with "" empty string to deactivate
*.*Node[*].mobility.visualRepresentation = "^"
*.*Node[*].useVadere = false

[Config sumoOnly2]
extends=sumoBase,FourGCellularBase,BeaconAppBase
description=Simple scenario (sumo, UDP Beacons) where only two persons walk on a straight line.
*.traci.launcher.sumoCfgBase = absFilePath("sumo/simple/simple_only2.sumo.cfg")
*.coordConverter.netFile = xmldoc("sumo/simple/simple.net.xml")
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/simple/simple.net.xml")

[Config sumoOnly2Tcp]
extends=sumoBase,FiveGCellularBase,TcpAppBase
description=Simple scenario (sumo, HTTP over TCP) where only two persons walk on a straight line.
*.traci.launcher.sumoCfgBase = absFilePath("sumo/simple/simple_only2.sumo.cfg")
*.coordConverter.netFile = xmldoc("sumo/simple/simple.net.xml")
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/simple/simple.net.xml")

[Config sumoSimple]
extends=sumoBase,FourGCellularBase,BeaconAppBase
description=Simple scenario (sumo, UDP Beacons) where multiple persons walk on a straigt line.
*.traci.launcher.sumoCfgBase = absFilePath("sumo/simple/simple.sumo.cfg")
*.coordConverter.netFile = xmldoc("sumo/simple/simple.net.xml")
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/simple/simple.net.xml")

[Config sumoSimpleTcp]
extends=sumoBase,FiveGCellularBase,TcpAppBase
description=Simple scenario (sumo, HTTP over TCP) where multiple persons walk on a straigt line.
*.traci.launcher.sumoCfgBase = absFilePath("sumo/simple/simple.sumo.cfg")
*.coordConverter.netFile = xmldoc("sumo/simple/simple.net.xml")
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/simple/simple.net.xml")

[Config sumoBottleneck]
extends=sumoBase,FourGCellularBase,BeaconAppBase
description=A bottleneck scenario (sumo, UDP Beacons): persons walk to bottleneck and afterwards spread to different targets.
*.traci.launcher.sumoCfgBase = absFilePath("sumo/bottleneck/bottleneck.sumo.cfg")
*.coordConverter.netFile = xmldoc("sumo/bottleneck/bottleneck.net.xml")
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/bottleneck/bottleneck.net.xml")

[Config sumoBottleneckTcp]
extends=sumoBase,FiveGCellularBase,TcpAppBase
description=A bottleneck scenario (sumo, HTTP over TCP): persons walk to bottleneck and afterwards spread to different targets.
*.traci.launcher.sumoCfgBase = absFilePath("sumo/bottleneck/bottleneck.sumo.cfg")
*.coordConverter.netFile = xmldoc("sumo/bottleneck/bottleneck.net.xml")
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/bottleneck/bottleneck.net.xml")

[Config sumoCombined]
extends=sumoBase,FourGCellularBase,BeaconAppBase
description=Scenario combining vehicles and cars (sumo only!).
*.traci.launcher.sumoCfgBase = absFilePath("sumo/combined/combined.sumo.cfg")
*.coordConverter.netFile = xmldoc("sumo/combined/combined.net.xml")
*.visualization.sceneVisualizer.mapFile = xmldoc("sumo/combined/combined.net.xml")

################################################################################################################
## mobility model: vadere pedestrian dynamics simulation
################################################################################################################

[Config vadereBase]
description = Base configuration configuring sumo as a mobility provider.
# Use the OsgCoordConverterLocal instead the OsgCoordRemote
*.coordConverter.typename = "OsgCoordConverterVadere"
**.coordConverterModule = "coordConverter"

# TRACI parameters
*.traci.launcher.hostname = "vadere"
*.traci.launcher.port = 9998
*.traci.launcher.useVadereSeed = false
*.traci.launcher.seed = ${repetition}
*.traci.core.version = -1
*.traci.core.typename = "VadereCore"
*.traci.core.selfStopping = false

*.traci.subscriptions.typename = "VadereSubscriptionManager"
*.traci.nodes.typename = "VadereNodeManager"

*.traci.mapper.personType = "crownet.nodes.ApplicationLayerPedestrian"
*.traci.mapper.vehicleType = "crownet.nodes.ApplicationLayerVehicle"

# Node parameters
*.pNode[*].mobility.typename  = "crownet.artery.traci.InetVaderePersonMobility"
*.pNode[*].vanetza.position.typename = "PedestrianPositionProvider"
*.*Node[*].useVadere = true
# actiavete visualisation. replace with "" empty string to deactivate
*.*Node[*].mobility.visualRepresentation = "^"

[Config vadereOnly2]
description=Simple scenario (vadere, UDP Beacons) where only two persons walk on a straight line.
extends=vadereBase,FourGCellularBase,BeaconAppBase
**.vadereScenarioPath = absFilePath("vadere/scenarios/simple_only2.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/simple_env.xml")

[Config vadereOnly2Tcp]
description=Simple scenario (vadere, HTTP over TCP) where only two persons walk on a straight line.
extends=vadereBase,FiveGCellularBase,TcpAppBase
**.vadereScenarioPath = absFilePath("vadere/scenarios/simple_only2.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/simple_env.xml")

[Config vadereSimple]
description=Simple scenario (vadere, UDP Beacons) where multiple persons walk on a straigt line.
extends=vadereBase,FourGCellularBase,BeaconAppBase
**.vadereScenarioPath = absFilePath("vadere/scenarios/simple.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/simple_env.xml")

[Config vadereSimpleTcp]
description=Simple scenario (vadere, HTTP over TCP) where multiple persons walk on a straigt line.
extends=vadereBase,FiveGCellularBase,TcpAppBase
**.vadereScenarioPath = absFilePath("vadere/scenarios/simple.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/simple_env.xml")

[Config vadereBottleneck]
description=A bottleneck scenario (vadere, UDP Beacons): persons walk to bottleneck and afterwards spread to different targets.
extends=vadereBase,FourGCellularBase,BeaconAppBase
**.vadereScenarioPath = absFilePath("vadere/scenarios/bottleneck.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/bottleneck_env.xml")

[Config vadereBottleneckTcp]
description=A bottleneck scenario (vadere, HTTP over TCP): persons walk to bottleneck and afterwards spread to different targets.
extends=vadereBase,FiveGCellularBase,TcpAppBase
**.vadereScenarioPath = absFilePath("vadere/scenarios/bottleneck.scenario")
*.physicalEnvironment.config = xmldoc("vadere/scenarios/bottleneck_env.xml")
