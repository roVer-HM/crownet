[General]
network = World
image-path=../../images
print-undisposed = true

#============= Simulation parameters ================
sim-time-limit=400s
#warmup-period=60s      # Note: When analyzing the results, you need to apply the same warmup-period to measurement data!
repeat = 3

#============= Statistics ===========================
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
experiment-label = ${datetime} # use ${experiment}
output-scalar-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.vec
cmdenv-output-file = ${resultdir}/${configname}_${experiment}/vars_${iterationvarsf}rep_${repetition}.out
seed-set = ${repetition}

**.vector-recording = true
**.scalar-recording = true
#**.statistic-recording = false
**.routingRecorder.enabled = false


#============= Mobility parameters ==================
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

#============= AMC module parameters ===============
**.ueTxPower = 20
**.eNodeBTxPower = 20
**.numRbDl = 20
**.numRbUl = 20
**.numBands = 20

#============= Channel control parameters ===========
**.channelControl.pMax = 1W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2600e+6Hz


#============= Channel model parameters =============
# for a complete list of all parameters:
#   refer to LteChannelModels.ned
**.channelModel.shadowing = true
**.channelModel.scenario = "URBAN_MICROCELL"
**.channelModel.nodeb_height = 25
**.channelModel.ue_height = 1.5
**.channelModel.building_height = 20

**.channelModel.street_wide = 20
**.channelModel.carrierFrequency = 2.6  # carrier frequency (in GHz)
**.channelModel.antennaGainUe = 0
**.channelModel.antennGainEnB = 0

**.channelModel.correlation_distance = 25
**.channelModel.dynamic_los = true   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel.fixed_los = false      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel.fading = false        # Enable/disable fading
**.channelModel.fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel.fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel.delay_rms = 363e-9

**.channelModel.extCell_interference = false # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel.downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel.uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel.d2d_interference = true      # if true, enables the interference computation for D2D connections

#============= Protocol stack parameters  ===========
#(as in OpenAirInterface Configuration)
**.rlc.um.queueSize = 5000000B              # OpenAirInterface queue limit for RLC_MODE_UM  (Commit f58ad3c39f04ca7305202749a7dad2b25ef6b942 file rlc.c  method rlc_data_req() line 478)
**.mac.queueSize = 10000B					# reduce MAC queue size - OpenAirInterface does not queue packets in mac layer
**.pdcpRrc.backgroundRlc = 1                # default RLC type (0: TM, 1: UM, 2: AM)


#=============  defaults  ===========
# eNodeB
*.eNB.mobility.initFromDisplayString = false
*.eNB.mobility.initialX = 20m
*.eNB.mobility.initialY = 20m
*.eNB*.nicType = "LteNicEnbD2D"
*.eNB*.cellularNic.mac.amcMode = "D2D"

# UE
*.pNode[*].macCellId = 1
*.pNode[*].masterId = 1
*.pNode[*].nicType = "LteNicUeD2D"
*.pNode[*].radioDriver.dispatchInterfaceName = "cellular"
*.pNode[*].cellularNic.mac.amcMode = "D2D" #"D2D"
*.pNode[*].cellularNic.address = "auto"

**.coordConverterModule = "coordConverter"
**.identiyRegistryModule = "identiyRegistry"
*.configurator.config = xmldoc("ip4Config.xml")

# PhysicalEnviroment (*.physicalEnvironment.config set by other config)
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m

# END General

[Config D2D_General]

## Enrolled multicast groups (TraCI) ##
#  Must be set in the HostAutoConfigurator (instead of ip4Config.xml), seperated by a single space character
*.*Node[*].configurator.interfaces = "cellular" #"wlan"
*.*Node[*].configurator.addressBase = "20.0.0.0"
*.*Node[*].configurator.netmask = "255.0.0.0"

**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data
*.eNB.cellularNic.processingDelayIn = 1134us    # additional processing delays
*.eNB.cellularNic.processingDelayOut = 1134us
*.*Node[*].cellularNic.processingDelayIn = 5518us
*.*Node[*].cellularNic.processingDelayOut = 1134us

### Select CQI for D2D transmissions ###
# One-to-Many communications work with fixed CQI values only. Set the parameter **.usePreconfiguredTxParams and
# select the desired CQI using the parameter **.d2dCqi
**.usePreconfiguredTxParams = true
**.d2dCqi = 7

# END D2D_General

[Config AidSetup]
*.traci.launcher.hostname = "vadere"
*.traci.launcher.port = 9998
*.traci.mapper.personType = "crownet.nodes.AidPedestrian"
*.pNode[*].useArtery = false
*.pNode[*].numApps = 2
# NeighborhoodTable
*.pNode[*].nTable.typename = "crownet.neighbourhood.NeighborhoodTable"
*.pNode[*].nTable.maxAge = 7s

# DcDMap Application
*.pNode[*].app[0].typename = "DensityMapApp"
*.pNode[*].app[0].app.typename = "DensityMapAppSimple"
*.pNode[*].app[0].app.startTime = uniform(0s,0.02s)
*.pNode[*].app[0].app.mapTypeLog = "ymf"
*.pNode[*].app[0].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[0].scheduler.generationInterval = 2s
# Beacon Application
*.pNode[*].app[1].typename = "BeaconApp"
*.pNode[*].app[1].app.typename = "BeaconDynamic"
*.pNode[*].app[1].app.startTime = uniform(0s,0.02s)
*.pNode[*].app[1].scheduler.typename = "IntervalScheduler"
*.pNode[*].app[1].scheduler.generationInterval = 1s

[Config env_mf_001_small_60]
extends=D2D_General
**.vadereScenarioPath = "vadere/scenarios/mf_001_small_60.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_small_env.xml")

[Config env_mf_001_small_120]
extends=D2D_General
**.vadereScenarioPath = "vadere/scenarios/mf_001_small_120.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_small_env.xml")

[Config env_mf_001_base_96]
extends=D2D_General
**.vadereScenarioPath = "vadere/scenarios/mf_001_base_96.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_base_env.xml")

[Config env_mf_001_base_72]
extends=D2D_General
**.vadereScenarioPath = "vadere/scenarios/mf_001_base_72.scenario"
*.physicalEnvironment.config = xmldoc("vadere/scenarios/mf_001_base_env.xml")


[Config vadere_120]
extends = env_mf_001_small_120, AidSetup
*.gloablDensityMap.typename = "GlobalDensityMap"

[Config vadere_60]
extends = env_mf_001_small_60, AidSetup


[Config vadere_base_96]
extends = env_mf_001_base_96, AidSetup


[Config vadere_base_72]
extends = env_mf_001_base_72, AidSetup


[Config vadere_120_maptypes]
extends = vadere_120
repeat = 1
*.gloablDensityMap.typename = "GlobalDensityMap"
**.rlc.um.mapAllLcidsToSingleBearer = true  # OpenAirInterface uses a single bearer for all data
*.pNode[*].densityMapApp.mapTypeLog = "mean"
*.pNode[*].densityMapApp.mapType = "mean"

