variables:
 # CI parameters and options
 GIT_SUBMODULE_STRATEGY: recursive    # clone submodules
 GIT_LFS_SKIP_SMUDGE: "1"             # ignore lfs (some problems with vadere submodule)
 CROWNET_HOME: '${CI_PROJECT_DIR}'    # all files relative to this
 DOCKER_CLIENT_TIMEOUT: '300'         # timeout for docker client (needs to be higher than default)
 
# the image tag env VARIABLES are specified in ${CI_PROJECT_DIR}/config/CONTAINER_VERSION.config
# the container registry env VARIABLES are specified in ${CI_PROJECT_DIR}/config/CONTAINER_REGISTRY.config 

 # Paths and aliases
 ANALYZER_M: '${CI_PROJECT_DIR}/analysis/crownetutils'
 FLOWCONTROL_M: '${CI_PROJECT_DIR}/flowcontrol'
 VADERE_PATH: '${CI_PROJECT_DIR}/vadere'

stages:
  - build
  - test
  - uq-test
  - simulation-campaign
  - deploy

# TODO: fix the caching. Currently, old cached versions of (flowcontrol, crownetutils, suq-controller) are used instead of the updated versions despite "omnetpp exec make analysis-clean" 
# cache:
#  key: ${CI_COMMIT_REF_SLUG}
#  paths:
#    - ./out/crownet_user

# Build all dependencies of the crownet project (default: release mode)
# This is the base for running simulation campaings on a dedicated
# gitlab runner with more cores and memmory. Use latest version of containers
build-for-sim:
  stage: build
  tags:
    - crownet-sim
  variables:
    ARTERY_M: '${CI_PROJECT_DIR}/artery'
    INET_M: '${CI_PROJECT_DIR}/inet4'
    MOBILENETWORK_M: '${CI_PROJECT_DIR}/simu5g'
    CROWNET_M: '${CI_PROJECT_DIR}/crownet'
    VEINS_M: '${CI_PROJECT_DIR}/veins'
    VEINS_INET_M: '${CI_PROJECT_DIR}/veins/subprojects/veins_inet'
    MODE: 'release'
  script:
    # ## update required docker images
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - "source setup -i"
    - docker pull ${CROWNET_IMAGE_BASE}/omnetpp:${CROWNET_OPP_CONT_TAG}
    - docker pull ${CROWNET_IMAGE_BASE}/sumo:${CROWNET_SUMO_CONT_TAG}
    - docker pull ${CROWNET_IMAGE_BASE}/vadere:${CROWNET_VADERE_CONT_TAG}
    - docker pull ${CROWNET_IMAGE_BASE}/flowcontrol:${CROWNET_CONTROL_CONT_TAG}
    # ## build all models
    - "${CI_PROJECT_DIR}/scripts/omnetpp_rnd ${CROWNET_OPP_CONT_TAG} exec make makefiles"
    - "${CI_PROJECT_DIR}/scripts/omnetpp_rnd ${CROWNET_OPP_CONT_TAG} exec make MODE=${MODE}"
    # ## export inet version
    - "cd ${INET_M}"
    - "export INET_VERSION=$(./_scripts/get_version)"
    # inet> cleanup not needed directories
    - rm -rf doc examples showcases tutorials
    # ## cleanup not needed directories in veins
    - "cd ${VEINS_M}"
    - rm -rf doc examples subprojects/veins_catch subprojects/veins_inet3 subprojects/veins_testsims
    # ## global cleanup
    - "cd ${CROWNET_HOME}"
    - "find . -name \"*.o\" -type f -delete"
    - "cd ${INET_M}"
    # inet> only delete inet sources for artefacts. We may need the other ones.
    - "find . -name \"*.cc\" -type f -delete"
    # artery> only use keep libs and h files.
    - "cd ${ARTERY_M}"
    - rm -rf scenarios cmake
    - "find . -name \"*.o\" -type f -delete"
    - "find . -name \"*.cc\" -type f -delete"
    - "find build/ -type f -not -path '*.so' -delete"
    - "find extern/vanetza/build -type f -not -path '*.so' -delete"
  artifacts:
    paths:
    - ${CROWNET_HOME}/scripts
    - ${CROWNET_HOME}/out
    - ${CROWNET_HOME}/simu5g
    - ${CROWNET_HOME}/inet4
    - ${CROWNET_HOME}/crownet
    - ${CROWNET_HOME}/veins
    - ${CROWNET_HOME}/artery
    expire_in: 1 weeks

build-analysis-tools:
  stage: build
  tags:
    - crownet-sim
  script:
    # ## update required docker images
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - "source setup -i"
    - docker pull $CI_REGISTRY/rover/crownet/omnetpp
    # ## build python project and setup user enviroment
    - "${CI_PROJECT_DIR}/scripts/omnetpp_rnd ${CROWNET_OPP_CONT_TAG} exec make analysis-clean"
    - "${CI_PROJECT_DIR}/scripts/omnetpp_rnd ${CROWNET_OPP_CONT_TAG} exec make analysis-build"
    - "${CI_PROJECT_DIR}/scripts/omnetpp_rnd ${CROWNET_OPP_CONT_TAG} exec make out/crownet_user"
  artifacts:
    paths:
    - ${CROWNET_HOME}/out

# run the unit tests
gtests:
  stage: test
  tags:
    - crownet-sim
  script:
    - "source setup -i"
    - "cd ${CROWNET_HOME}/crownet"
    - "${CI_PROJECT_DIR}/scripts/omnetpp_rnd ${CROWNET_OPP_CONT_TAG} exec make test"
  artifacts:
    when: always
    paths:
    - ${CROWNET_HOME}/crownet/tests/fingerprint
    expire_in: 8 weeks

# run the fingerprint tests
fingerprints:
  stage: test
  tags:
    - crownet-sim
  variables:
    ANALYZER_M: '${CI_PROJECT_DIR}/analysis/crownetutils/'
  script:
    - "source setup -i"
    - "source ./out/crownet_user/bin/activate"
    - "cd ${CROWNET_HOME}/crownet/tests/fingerprint"
    - "export DOCKER_CLIENT_TIMEOUT=${DOCKER_CLIENT_TIMEOUT}"
    - "export COMPOSE_HTTP_TIMEOUT=${DOCKER_CLIENT_TIMEOUT}"
    - "./fingerprints"
  artifacts:
    when: always
    paths:
    - "${CROWNET_HOME}/crownet/tests/fingerprint/results"
    - "${CROWNET_HOME}/crownet/tests/fingerprint/*csv*"
    - "${CROWNET_HOME}/crownet/tests/fingerprint/*.csv"
    - "${CROWNET_HOME}/crownet/tests/fingerprint/*.out"
    expire_in: 8 weeks

# run the fingerprint tests
fingerprints_crownet:
  stage: test
  tags:
    - crownet-sim
  variables:
    ANALYZER_M: '${CI_PROJECT_DIR}/analysis/crownetutils/'
  script:
    - "source setup -i"
    - "source ./out/crownet_user/bin/activate"
    - "cd ${CROWNET_HOME}/crownet/tests/fingerprint"
    - "export DOCKER_CLIENT_TIMEOUT=${DOCKER_CLIENT_TIMEOUT}"
    - "export COMPOSE_HTTP_TIMEOUT=${DOCKER_CLIENT_TIMEOUT}"
    - "./fingerprints_crownet"
  artifacts:
    when: always
    paths:
    - "${CROWNET_HOME}/crownet/tests/fingerprint/yml_out.d"
    - "${CROWNET_HOME}/crownet/tests/fingerprint/hash.d"
    - "${CROWNET_HOME}/crownet/tests/fingerprint/*.yml"
    expire_in: 8 weeks

# run the opp tests
opp-tests:
  stage: test
  tags:
    - crownet-sim
  script:
    - "source setup -i"
    - "cd ${CROWNET_HOME}/crownet"
    - "${CI_PROJECT_DIR}/scripts/omnetpp_rnd ${CROWNET_OPP_CONT_TAG} exec make opp-test"
  artifacts:
    when: always
    paths:
    - ${CROWNET_HOME}/crownet/tests/omnetpp/work
    expire_in: 8 weeks

# run uq simulation studies
uq-unit-tests:
  stage: uq-test
  tags:
    - crownet-sim
  variables:
    ANALYSIS_UQ_M: '${CROWNET_HOME}/analysis/uq'
  script:
    - "source setup -i"
    - "source ./out/crownet_user/bin/activate"
    - "cd ${CROWNET_HOME}/analysis/uq"
    - "python3 -m unittest discover -v"

uq-integration-tests:
  stage: uq-test
  tags:
    - crownet-sim
  variables:
    ANALYSIS_UQ_M: '${CROWNET_HOME}/analysis/uq'
  script:
    - "source setup -i"
    - "source ./out/crownet_user/bin/activate"
    - "cd ${CROWNET_HOME}/analysis/uq/simulation_studies"
    - "python3 run_integration_tests.py"
  artifacts:
    when: always
    paths:
      - ${CROWNET_HOME}/analysis/uq/simulation_studies/unittest_sim_output
    exclude:
      - ${CROWNET_HOME}/analysis/uq/simulation_studies/unittest_sim_output/**/simulation_runs/**
      - ${CROWNET_HOME}/analysis/uq/simulation_studies/unittest_sim_output/**/simulation_runs/**/*
    expire_in: 4 weeks

# run given simulation-campaign
simulation-campaign:
  stage: simulation-campaign
  tags:
    - crownet-sim
  rules:
    - if: '$SIM_TRIGGER'
  script:
    - "source setup -i"
    - "/bin/bash ${CROWNET_HOME}/$SIM_SCRIPT"
    - "echo ${CI_COMMIT_SHA} > ${CROWNET_HOME}/$SIM_SCRIPT-results/commit-hash"
    - "echo ${CI_PIPELINE_IID} > ${CROWNET_HOME}/$SIM_SCRIPT-results/pipeline-id"
    - "cat /proc/cpuinfo > > ${CROWNET_HOME}/$SIM_SCRIPT-results/cpuinfo"
  artifacts:
    paths:
      - ${CROWNET_HOME}/$SIM_SCRIPT
      - ${CROWNET_HOME}/$SIM_SCRIPT-results
      - ${CROWNET_HOME}/scripts
      - ${CROWNET_HOME}/simu5g/src
      - ${CROWNET_HOME}/inet4/src
      - ${CROWNET_HOME}/crownet
      - ${CROWNET_HOME}/veins/src
      - ${CROWNET_HOME}/veins/subprojects/veins_inet/src
    expire_in: 4 weeks


build_images:
  stage: deploy
  when: manual
  tags:
    - crownet-sim
  script:
    - eval $(ssh-agent -s)
    - "ls -a /home/gitlab-runner/.ssh/"
    - "ssh-add /home/gitlab-runner/.ssh/crownet_CI_docker"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - "cd ${CROWNET_HOME}"
    - "docker system prune -a -f"
    - "source setup -i -u"
    - "bash -x ${CROWNET_HOME}/scripts/build_all_images -p -q"
    - "bash -x ${CROWNET_HOME}/scripts/pull_and_push_images -s ${CROWNET_IMAGE_BASE} -t ghcr.io/rover-hm -p -k"


